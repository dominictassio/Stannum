#
# === DEFINITION STATEMENT ===
#
#   Definitions take the form of:
#
#       <identifier> = <expression> ;
#
#   Where the identifier is the name to assign the
# expression to in the current context. A definition cannot
# be used to redefine an identifier. Doing so will result
# in a runtime error.
#   If the expression is one that ends with a '}' (like in
# the case of block, if, lambda, and record expressions),
# then the definition does not need a semicolon terminator.
#
#       <identifier> = {...}
#       <identifier> = if ... {...} else {...}
#       <identifier> = () {...}
#       <identifier> = {..., ..., ...}
#


Pi = 3.14159265358979323846;


# Pi = 22 / 7;
# === Runtime Error ===
# Variable 'Pi' is already defined!


def with block expr = { two = 2; ten = two + two * two * two; ten }


def with if expr = if True { 1 } else { 0 }


def with block lambda = () { return 42; }


def with expr lambda = () => 6 * 9;


def with record = { field1 = 1, field2 = 2, field3 = 3 }