#
# === CONCATENATION OPERATOR ===
#
#   The concatenation operator can take the form of:
#
#       <expression> ++ <expression>
#
#   The left and right expressions must both evaluate to
# either lists or strings. The result of the operator will
# be a new list or new string that has the contents of both
# with the contents from the left and then the contents of
# the right.
#
#       e.g. [1,2,3] ++ [4,5,6] == [1,2,3,4,5,6]
#
#   The operator has a higher precedence than the relational
# operators and is left-associative.
#
#       e.g. list1 ++ list2 ++ list3 => (list1 ++ list2) ++ list3
#
#   Only definition statements are allowed in the top-level
# so the examples in the file are all within the main
# definition.
#


main = () {

    [1,2,3] ++ [4,5,6]; #=> [1,2,3,4,5,6]
    
    [1,2] ++ [3,4] ++ [5,6]; #=> [1,2,3,4,5,6];
    
    "Hello," ++ " " ++ "World!" #=> "Hello, World!"

}