//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Stannum.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Stannum.Grammar {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="StannumParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IStannumVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] StannumParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.repl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRepl([NotNull] StannumParser.ReplContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] StannumParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Definition</c>
	/// labeled alternative in <see cref="StannumParser.definition_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefinition([NotNull] StannumParser.DefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DefinitionWithoutSemi</c>
	/// labeled alternative in <see cref="StannumParser.definition_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefinitionWithoutSemi([NotNull] StannumParser.DefinitionWithoutSemiContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.exprStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprStmt([NotNull] StannumParser.ExprStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.forStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStmt([NotNull] StannumParser.ForStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="StannumParser.ifStmt_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStmt([NotNull] StannumParser.IfStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IfElseStmt</c>
	/// labeled alternative in <see cref="StannumParser.ifStmt_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfElseStmt([NotNull] StannumParser.IfElseStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IfElseIfStmt</c>
	/// labeled alternative in <see cref="StannumParser.ifStmt_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfElseIfStmt([NotNull] StannumParser.IfElseIfStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.whileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStmt([NotNull] StannumParser.WhileStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.blockStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockStmt([NotNull] StannumParser.BlockStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] StannumParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentSkip</c>
	/// labeled alternative in <see cref="StannumParser.assignment_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentSkip([NotNull] StannumParser.AssignmentSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="StannumParser.assignment_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] StannumParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CoalesceSkip</c>
	/// labeled alternative in <see cref="StannumParser.coalesce_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCoalesceSkip([NotNull] StannumParser.CoalesceSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Coalesce</c>
	/// labeled alternative in <see cref="StannumParser.coalesce_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCoalesce([NotNull] StannumParser.CoalesceContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalOrSkip</c>
	/// labeled alternative in <see cref="StannumParser.logicalOr_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOrSkip([NotNull] StannumParser.LogicalOrSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="StannumParser.logicalOr_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOr([NotNull] StannumParser.LogicalOrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="StannumParser.logicalAnd_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAnd([NotNull] StannumParser.LogicalAndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalAndSkip</c>
	/// labeled alternative in <see cref="StannumParser.logicalAnd_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAndSkip([NotNull] StannumParser.LogicalAndSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EqualitySkip</c>
	/// labeled alternative in <see cref="StannumParser.equality_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualitySkip([NotNull] StannumParser.EqualitySkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="StannumParser.equality_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEquality([NotNull] StannumParser.EqualityContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Relational</c>
	/// labeled alternative in <see cref="StannumParser.relational_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelational([NotNull] StannumParser.RelationalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RelationalSkip</c>
	/// labeled alternative in <see cref="StannumParser.relational_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalSkip([NotNull] StannumParser.RelationalSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AdditiveSkip</c>
	/// labeled alternative in <see cref="StannumParser.additive_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveSkip([NotNull] StannumParser.AdditiveSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Additive</c>
	/// labeled alternative in <see cref="StannumParser.additive_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditive([NotNull] StannumParser.AdditiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Multiplicative</c>
	/// labeled alternative in <see cref="StannumParser.multiplicative_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicative([NotNull] StannumParser.MultiplicativeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MultiplicativeSkip</c>
	/// labeled alternative in <see cref="StannumParser.multiplicative_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeSkip([NotNull] StannumParser.MultiplicativeSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrefixSkip</c>
	/// labeled alternative in <see cref="StannumParser.prefix_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrefixSkip([NotNull] StannumParser.PrefixSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Prefix</c>
	/// labeled alternative in <see cref="StannumParser.prefix_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrefix([NotNull] StannumParser.PrefixContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Call</c>
	/// labeled alternative in <see cref="StannumParser.call_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCall([NotNull] StannumParser.CallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CallSkip</c>
	/// labeled alternative in <see cref="StannumParser.call_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCallSkip([NotNull] StannumParser.CallSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimary([NotNull] StannumParser.PrimaryContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.primaryWithBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryWithBlock([NotNull] StannumParser.PrimaryWithBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Access</c>
	/// labeled alternative in <see cref="StannumParser.access_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAccess([NotNull] StannumParser.AccessContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AccessSkip</c>
	/// labeled alternative in <see cref="StannumParser.access_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAccessSkip([NotNull] StannumParser.AccessSkipContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.blockExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockExpr([NotNull] StannumParser.BlockExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.breakExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakExpr([NotNull] StannumParser.BreakExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.continueExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContinueExpr([NotNull] StannumParser.ContinueExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.grouped"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGrouped([NotNull] StannumParser.GroupedContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] StannumParser.IdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IfElseExpr</c>
	/// labeled alternative in <see cref="StannumParser.ifExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfElseExpr([NotNull] StannumParser.IfElseExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IfElseIfExpr</c>
	/// labeled alternative in <see cref="StannumParser.ifExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfElseIfExpr([NotNull] StannumParser.IfElseIfExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.lambdaWithBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaWithBlock([NotNull] StannumParser.LambdaWithBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.lambdaWithExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaWithExpr([NotNull] StannumParser.LambdaWithExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NumberLit</c>
	/// labeled alternative in <see cref="StannumParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberLit([NotNull] StannumParser.NumberLitContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringLit</c>
	/// labeled alternative in <see cref="StannumParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLit([NotNull] StannumParser.StringLitContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ListLit</c>
	/// labeled alternative in <see cref="StannumParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitListLit([NotNull] StannumParser.ListLitContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RecordLit</c>
	/// labeled alternative in <see cref="StannumParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRecordLit([NotNull] StannumParser.RecordLitContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitList([NotNull] StannumParser.ListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.record"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRecord([NotNull] StannumParser.RecordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.recordMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRecordMember([NotNull] StannumParser.RecordMemberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.returnExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnExpr([NotNull] StannumParser.ReturnExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="StannumParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyword([NotNull] StannumParser.KeywordContext context);
}
} // namespace Stannum.Grammar
