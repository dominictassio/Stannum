//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Stannum.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Stannum.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class StannumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, BREAK=38, 
		CONTINUE=39, ELSE=40, FOR=41, IF=42, MATCH=43, RETURN=44, STRUCT=45, VAR=46, 
		WHILE=47, IDENTIFIER=48, NUMBER=49, STRING=50, WS=51, COMMENT=52;
	public const int
		RULE_program = 0, RULE_repl = 1, RULE_statement = 2, RULE_definition_ = 3, 
		RULE_exprStmt = 4, RULE_forStmt = 5, RULE_ifStmt_ = 6, RULE_whileStmt = 7, 
		RULE_blockStmt = 8, RULE_expression = 9, RULE_assignment_ = 10, RULE_coalesce_ = 11, 
		RULE_logicalOr_ = 12, RULE_logicalAnd_ = 13, RULE_equality_ = 14, RULE_relational_ = 15, 
		RULE_concatenative_ = 16, RULE_additive_ = 17, RULE_multiplicative_ = 18, 
		RULE_prefix_ = 19, RULE_accessOrCall = 20, RULE_primary = 21, RULE_primaryWithBlock = 22, 
		RULE_blockExpr = 23, RULE_breakExpr = 24, RULE_continueExpr = 25, RULE_grouped = 26, 
		RULE_identifier = 27, RULE_ifExpr = 28, RULE_lambdaWithBlock = 29, RULE_lambdaWithExpr = 30, 
		RULE_literal = 31, RULE_list = 32, RULE_record = 33, RULE_recordField = 34, 
		RULE_returnExpr = 35, RULE_keyword = 36;
	public static readonly string[] ruleNames = {
		"program", "repl", "statement", "definition_", "exprStmt", "forStmt", 
		"ifStmt_", "whileStmt", "blockStmt", "expression", "assignment_", "coalesce_", 
		"logicalOr_", "logicalAnd_", "equality_", "relational_", "concatenative_", 
		"additive_", "multiplicative_", "prefix_", "accessOrCall", "primary", 
		"primaryWithBlock", "blockExpr", "breakExpr", "continueExpr", "grouped", 
		"identifier", "ifExpr", "lambdaWithBlock", "lambdaWithExpr", "literal", 
		"list", "record", "recordField", "returnExpr", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "':'", "'->'", "'{'", "'}'", "':='", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'??'", "'||'", "'&&'", "'=='", "'!='", "'<'", 
		"'>'", "'<='", "'>='", "'++'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", 
		"'.'", "'?.'", "'('", "','", "')'", "'$'", "'=>'", "'['", "']'", "'break'", 
		"'continue'", "'else'", "'for'", "'if'", "'match'", "'return'", "'struct'", 
		"'var'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "BREAK", "CONTINUE", "ELSE", "FOR", "IF", "MATCH", "RETURN", 
		"STRUCT", "VAR", "WHILE", "IDENTIFIER", "NUMBER", "STRING", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Stannum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StannumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StannumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StannumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Definition_Context _definition_;
		public IList<Definition_Context> _Defs = new List<Definition_Context>();
		public ITerminalNode Eof() { return GetToken(StannumParser.Eof, 0); }
		public Definition_Context[] definition_() {
			return GetRuleContexts<Definition_Context>();
		}
		public Definition_Context definition_(int i) {
			return GetRuleContext<Definition_Context>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__33 || _la==IDENTIFIER) {
				{
				{
				State = 74; _localctx._definition_ = definition_();
				_localctx._Defs.Add(_localctx._definition_);
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public ExpressionContext Value;
		public ITerminalNode Eof() { return GetToken(StannumParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplContext repl() {
		ReplContext _localctx = new ReplContext(Context, State);
		EnterRule(_localctx, 2, RULE_repl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 82; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 87;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__23) | (1L << T__27) | (1L << T__30) | (1L << T__33) | (1L << T__35) | (1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 88; _localctx.Value = expression();
				}
			}

			State = 91; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Definition_Context definition_() {
			return GetRuleContext<Definition_Context>(0);
		}
		public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		public IfStmt_Context ifStmt_() {
			return GetRuleContext<IfStmt_Context>(0);
		}
		public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; definition_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; exprStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; forStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; ifStmt_();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97; whileStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98; blockStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_Context : ParserRuleContext {
		public Definition_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_; } }
	 
		public Definition_Context() { }
		public virtual void CopyFrom(Definition_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefinitionWithoutSemiContext : Definition_Context {
		public IdentifierContext Name;
		public PrimaryWithBlockContext Value;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PrimaryWithBlockContext primaryWithBlock() {
			return GetRuleContext<PrimaryWithBlockContext>(0);
		}
		public DefinitionWithoutSemiContext(Definition_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionWithoutSemi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionContext : Definition_Context {
		public IdentifierContext Name;
		public ExpressionContext Value;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinitionContext(Definition_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_Context definition_() {
		Definition_Context _localctx = new Definition_Context(Context, State);
		EnterRule(_localctx, 6, RULE_definition_);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new DefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 101; ((DefinitionContext)_localctx).Name = identifier();
				State = 102; Match(T__0);
				State = 103; ((DefinitionContext)_localctx).Value = expression();
				State = 104; Match(T__1);
				}
				break;
			case 2:
				_localctx = new DefinitionWithoutSemiContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; ((DefinitionWithoutSemiContext)_localctx).Name = identifier();
				State = 107; Match(T__0);
				State = 108; ((DefinitionWithoutSemiContext)_localctx).Value = primaryWithBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		public ExpressionContext Value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_exprStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; _localctx.Value = expression();
			State = 113; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public IdentifierContext Label;
		public ExpressionContext Value;
		public IdentifierContext Var;
		public BlockStmtContext Body;
		public ITerminalNode FOR() { return GetToken(StannumParser.FOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==IDENTIFIER) {
				{
				State = 115; _localctx.Label = identifier();
				State = 116; Match(T__2);
				}
			}

			State = 120; Match(FOR);
			State = 121; _localctx.Value = expression();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 122; Match(T__3);
				State = 123; _localctx.Var = identifier();
				}
			}

			State = 126; _localctx.Body = blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmt_Context : ParserRuleContext {
		public IfStmt_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt_; } }
	 
		public IfStmt_Context() { }
		public virtual void CopyFrom(IfStmt_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStmtContext : IfStmt_Context {
		public ExpressionContext Cond;
		public BlockStmtContext Cons;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public IfStmtContext(IfStmt_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStmtContext : IfStmt_Context {
		public ExpressionContext Cond;
		public BlockStmtContext Cons;
		public BlockStmtContext Alt;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public IfElseStmtContext(IfStmt_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseIfStmtContext : IfStmt_Context {
		public ExpressionContext Cond;
		public BlockStmtContext Cons;
		public IfStmt_Context AltIf;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public IfStmt_Context ifStmt_() {
			return GetRuleContext<IfStmt_Context>(0);
		}
		public IfElseIfStmtContext(IfStmt_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmt_Context ifStmt_() {
		IfStmt_Context _localctx = new IfStmt_Context(Context, State);
		EnterRule(_localctx, 12, RULE_ifStmt_);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(IF);
				State = 129; ((IfStmtContext)_localctx).Cond = expression();
				State = 130; ((IfStmtContext)_localctx).Cons = blockStmt();
				}
				break;
			case 2:
				_localctx = new IfElseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(IF);
				State = 133; ((IfElseStmtContext)_localctx).Cond = expression();
				State = 134; ((IfElseStmtContext)_localctx).Cons = blockStmt();
				State = 135; Match(ELSE);
				State = 136; ((IfElseStmtContext)_localctx).Alt = blockStmt();
				}
				break;
			case 3:
				_localctx = new IfElseIfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 138; Match(IF);
				State = 139; ((IfElseIfStmtContext)_localctx).Cond = expression();
				State = 140; ((IfElseIfStmtContext)_localctx).Cons = blockStmt();
				State = 141; Match(ELSE);
				State = 142; ((IfElseIfStmtContext)_localctx).AltIf = ifStmt_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public IdentifierContext Label;
		public ExpressionContext Value;
		public BlockStmtContext Body;
		public ITerminalNode WHILE() { return GetToken(StannumParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_whileStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==IDENTIFIER) {
				{
				State = 146; _localctx.Label = identifier();
				State = 147; Match(T__2);
				}
			}

			State = 151; Match(WHILE);
			State = 152; _localctx.Value = expression();
			State = 153; _localctx.Body = blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_blockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(T__4);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__23) | (1L << T__27) | (1L << T__30) | (1L << T__33) | (1L << T__35) | (1L << BREAK) | (1L << CONTINUE) | (1L << FOR) | (1L << IF) | (1L << RETURN) | (1L << WHILE) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				{
				State = 156; _localctx._statement = statement();
				_localctx._Stmts.Add(_localctx._statement);
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Assignment_Context assignment_() {
			return GetRuleContext<Assignment_Context>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; assignment_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_Context : ParserRuleContext {
		public Assignment_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_; } }
	 
		public Assignment_Context() { }
		public virtual void CopyFrom(Assignment_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentContext : Assignment_Context {
		public AccessOrCallContext Left;
		public IToken Op;
		public Assignment_Context Right;
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public Assignment_Context assignment_() {
			return GetRuleContext<Assignment_Context>(0);
		}
		public AssignmentContext(Assignment_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentSkipContext : Assignment_Context {
		public Coalesce_Context coalesce_() {
			return GetRuleContext<Coalesce_Context>(0);
		}
		public AssignmentSkipContext(Assignment_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_Context assignment_() {
		Assignment_Context _localctx = new Assignment_Context(Context, State);
		EnterRule(_localctx, 20, RULE_assignment_);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new AssignmentSkipContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 166; coalesce_();
				}
				break;
			case 2:
				_localctx = new AssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; ((AssignmentContext)_localctx).Left = accessOrCall(0);
				State = 168;
				((AssignmentContext)_localctx).Op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
					((AssignmentContext)_localctx).Op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 169; ((AssignmentContext)_localctx).Right = assignment_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coalesce_Context : ParserRuleContext {
		public Coalesce_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coalesce_; } }
	 
		public Coalesce_Context() { }
		public virtual void CopyFrom(Coalesce_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoalesceSkipContext : Coalesce_Context {
		public LogicalOr_Context logicalOr_() {
			return GetRuleContext<LogicalOr_Context>(0);
		}
		public CoalesceSkipContext(Coalesce_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceContext : Coalesce_Context {
		public LogicalOr_Context Left;
		public Coalesce_Context Right;
		public LogicalOr_Context logicalOr_() {
			return GetRuleContext<LogicalOr_Context>(0);
		}
		public Coalesce_Context coalesce_() {
			return GetRuleContext<Coalesce_Context>(0);
		}
		public CoalesceContext(Coalesce_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coalesce_Context coalesce_() {
		Coalesce_Context _localctx = new Coalesce_Context(Context, State);
		EnterRule(_localctx, 22, RULE_coalesce_);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new CoalesceSkipContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; logicalOr_(0);
				}
				break;
			case 2:
				_localctx = new CoalesceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; ((CoalesceContext)_localctx).Left = logicalOr_(0);
				State = 175; Match(T__12);
				State = 176; ((CoalesceContext)_localctx).Right = coalesce_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOr_Context : ParserRuleContext {
		public LogicalOr_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOr_; } }
	 
		public LogicalOr_Context() { }
		public virtual void CopyFrom(LogicalOr_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalOrSkipContext : LogicalOr_Context {
		public LogicalAnd_Context logicalAnd_() {
			return GetRuleContext<LogicalAnd_Context>(0);
		}
		public LogicalOrSkipContext(LogicalOr_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrContext : LogicalOr_Context {
		public LogicalOr_Context Left;
		public LogicalAnd_Context Right;
		public LogicalOr_Context logicalOr_() {
			return GetRuleContext<LogicalOr_Context>(0);
		}
		public LogicalAnd_Context logicalAnd_() {
			return GetRuleContext<LogicalAnd_Context>(0);
		}
		public LogicalOrContext(LogicalOr_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOr_Context logicalOr_() {
		return logicalOr_(0);
	}

	private LogicalOr_Context logicalOr_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOr_Context _localctx = new LogicalOr_Context(Context, _parentState);
		LogicalOr_Context _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_logicalOr_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LogicalOrSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 181; logicalAnd_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrContext(new LogicalOr_Context(_parentctx, _parentState));
					((LogicalOrContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOr_);
					State = 183;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 184; Match(T__13);
					State = 185; ((LogicalOrContext)_localctx).Right = logicalAnd_(0);
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAnd_Context : ParserRuleContext {
		public LogicalAnd_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAnd_; } }
	 
		public LogicalAnd_Context() { }
		public virtual void CopyFrom(LogicalAnd_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalAndContext : LogicalAnd_Context {
		public LogicalAnd_Context Left;
		public Equality_Context Right;
		public LogicalAnd_Context logicalAnd_() {
			return GetRuleContext<LogicalAnd_Context>(0);
		}
		public Equality_Context equality_() {
			return GetRuleContext<Equality_Context>(0);
		}
		public LogicalAndContext(LogicalAnd_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndSkipContext : LogicalAnd_Context {
		public Equality_Context equality_() {
			return GetRuleContext<Equality_Context>(0);
		}
		public LogicalAndSkipContext(LogicalAnd_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAnd_Context logicalAnd_() {
		return logicalAnd_(0);
	}

	private LogicalAnd_Context logicalAnd_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAnd_Context _localctx = new LogicalAnd_Context(Context, _parentState);
		LogicalAnd_Context _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_logicalAnd_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LogicalAndSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 192; equality_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndContext(new LogicalAnd_Context(_parentctx, _parentState));
					((LogicalAndContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAnd_);
					State = 194;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 195; Match(T__14);
					State = 196; ((LogicalAndContext)_localctx).Right = equality_(0);
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_Context : ParserRuleContext {
		public Equality_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_; } }
	 
		public Equality_Context() { }
		public virtual void CopyFrom(Equality_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualitySkipContext : Equality_Context {
		public Relational_Context relational_() {
			return GetRuleContext<Relational_Context>(0);
		}
		public EqualitySkipContext(Equality_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualitySkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : Equality_Context {
		public Equality_Context Left;
		public IToken Op;
		public Relational_Context Right;
		public Equality_Context equality_() {
			return GetRuleContext<Equality_Context>(0);
		}
		public Relational_Context relational_() {
			return GetRuleContext<Relational_Context>(0);
		}
		public EqualityContext(Equality_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_Context equality_() {
		return equality_(0);
	}

	private Equality_Context equality_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_Context _localctx = new Equality_Context(Context, _parentState);
		Equality_Context _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_equality_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new EqualitySkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 203; relational_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EqualityContext(new Equality_Context(_parentctx, _parentState));
					((EqualityContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_equality_);
					State = 205;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 206;
					((EqualityContext)_localctx).Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__15 || _la==T__16) ) {
						((EqualityContext)_localctx).Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 207; ((EqualityContext)_localctx).Right = relational_(0);
					}
					} 
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_Context : ParserRuleContext {
		public Relational_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_; } }
	 
		public Relational_Context() { }
		public virtual void CopyFrom(Relational_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelationalContext : Relational_Context {
		public Relational_Context Left;
		public IToken Op;
		public Concatenative_Context Right;
		public Relational_Context relational_() {
			return GetRuleContext<Relational_Context>(0);
		}
		public Concatenative_Context concatenative_() {
			return GetRuleContext<Concatenative_Context>(0);
		}
		public RelationalContext(Relational_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalSkipContext : Relational_Context {
		public Concatenative_Context concatenative_() {
			return GetRuleContext<Concatenative_Context>(0);
		}
		public RelationalSkipContext(Relational_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_Context relational_() {
		return relational_(0);
	}

	private Relational_Context relational_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_Context _localctx = new Relational_Context(Context, _parentState);
		Relational_Context _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_relational_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RelationalSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 214; concatenative_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationalContext(new Relational_Context(_parentctx, _parentState));
					((RelationalContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relational_);
					State = 216;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 217;
					((RelationalContext)_localctx).Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
						((RelationalContext)_localctx).Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 218; ((RelationalContext)_localctx).Right = concatenative_(0);
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Concatenative_Context : ParserRuleContext {
		public Concatenative_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenative_; } }
	 
		public Concatenative_Context() { }
		public virtual void CopyFrom(Concatenative_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcatenativeSkipContext : Concatenative_Context {
		public Additive_Context additive_() {
			return GetRuleContext<Additive_Context>(0);
		}
		public ConcatenativeSkipContext(Concatenative_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenativeSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenativeContext : Concatenative_Context {
		public Concatenative_Context Left;
		public Additive_Context Right;
		public Concatenative_Context concatenative_() {
			return GetRuleContext<Concatenative_Context>(0);
		}
		public Additive_Context additive_() {
			return GetRuleContext<Additive_Context>(0);
		}
		public ConcatenativeContext(Concatenative_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Concatenative_Context concatenative_() {
		return concatenative_(0);
	}

	private Concatenative_Context concatenative_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Concatenative_Context _localctx = new Concatenative_Context(Context, _parentState);
		Concatenative_Context _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_concatenative_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ConcatenativeSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 225; additive_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConcatenativeContext(new Concatenative_Context(_parentctx, _parentState));
					((ConcatenativeContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_concatenative_);
					State = 227;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 228; Match(T__21);
					State = 229; ((ConcatenativeContext)_localctx).Right = additive_(0);
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_Context : ParserRuleContext {
		public Additive_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_; } }
	 
		public Additive_Context() { }
		public virtual void CopyFrom(Additive_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class AdditiveSkipContext : Additive_Context {
		public Multiplicative_Context multiplicative_() {
			return GetRuleContext<Multiplicative_Context>(0);
		}
		public AdditiveSkipContext(Additive_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveContext : Additive_Context {
		public Additive_Context Left;
		public IToken Op;
		public Multiplicative_Context Right;
		public Additive_Context additive_() {
			return GetRuleContext<Additive_Context>(0);
		}
		public Multiplicative_Context multiplicative_() {
			return GetRuleContext<Multiplicative_Context>(0);
		}
		public AdditiveContext(Additive_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_Context additive_() {
		return additive_(0);
	}

	private Additive_Context additive_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_Context _localctx = new Additive_Context(Context, _parentState);
		Additive_Context _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_additive_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AdditiveSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 236; multiplicative_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditiveContext(new Additive_Context(_parentctx, _parentState));
					((AdditiveContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additive_);
					State = 238;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 239;
					((AdditiveContext)_localctx).Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__22 || _la==T__23) ) {
						((AdditiveContext)_localctx).Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 240; ((AdditiveContext)_localctx).Right = multiplicative_(0);
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_Context : ParserRuleContext {
		public Multiplicative_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_; } }
	 
		public Multiplicative_Context() { }
		public virtual void CopyFrom(Multiplicative_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiplicativeContext : Multiplicative_Context {
		public Multiplicative_Context Left;
		public IToken Op;
		public Prefix_Context Right;
		public Multiplicative_Context multiplicative_() {
			return GetRuleContext<Multiplicative_Context>(0);
		}
		public Prefix_Context prefix_() {
			return GetRuleContext<Prefix_Context>(0);
		}
		public MultiplicativeContext(Multiplicative_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeSkipContext : Multiplicative_Context {
		public Prefix_Context prefix_() {
			return GetRuleContext<Prefix_Context>(0);
		}
		public MultiplicativeSkipContext(Multiplicative_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_Context multiplicative_() {
		return multiplicative_(0);
	}

	private Multiplicative_Context multiplicative_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_Context _localctx = new Multiplicative_Context(Context, _parentState);
		Multiplicative_Context _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_multiplicative_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new MultiplicativeSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 247; prefix_();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 254;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicativeContext(new Multiplicative_Context(_parentctx, _parentState));
					((MultiplicativeContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_);
					State = 249;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 250;
					((MultiplicativeContext)_localctx).Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
						((MultiplicativeContext)_localctx).Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 251; ((MultiplicativeContext)_localctx).Right = prefix_();
					}
					} 
				}
				State = 256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Prefix_Context : ParserRuleContext {
		public Prefix_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_; } }
	 
		public Prefix_Context() { }
		public virtual void CopyFrom(Prefix_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrefixContext : Prefix_Context {
		public IToken Op;
		public Prefix_Context Operand;
		public Prefix_Context prefix_() {
			return GetRuleContext<Prefix_Context>(0);
		}
		public PrefixContext(Prefix_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixSkipContext : Prefix_Context {
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public PrefixSkipContext(Prefix_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_Context prefix_() {
		Prefix_Context _localctx = new Prefix_Context(Context, State);
		EnterRule(_localctx, 38, RULE_prefix_);
		int _la;
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__30:
			case T__33:
			case T__35:
			case BREAK:
			case CONTINUE:
			case IF:
			case RETURN:
			case IDENTIFIER:
			case NUMBER:
			case STRING:
				_localctx = new PrefixSkipContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 257; accessOrCall(0);
				}
				break;
			case T__23:
			case T__27:
				_localctx = new PrefixContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 258;
				((PrefixContext)_localctx).Op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__23 || _la==T__27) ) {
					((PrefixContext)_localctx).Op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 259; ((PrefixContext)_localctx).Operand = prefix_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessOrCallContext : ParserRuleContext {
		public AccessOrCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessOrCall; } }
	 
		public AccessOrCallContext() { }
		public virtual void CopyFrom(AccessOrCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : AccessOrCallContext {
		public AccessOrCallContext Callee;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Args = new List<ExpressionContext>();
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CallContext(AccessOrCallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessOrCallSkipContext : AccessOrCallContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public AccessOrCallSkipContext(AccessOrCallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessOrCallSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessContext : AccessOrCallContext {
		public AccessOrCallContext Subject;
		public IToken Op;
		public IdentifierContext Field;
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AccessContext(AccessOrCallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallContext : AccessOrCallContext {
		public AccessOrCallContext Subject;
		public IdentifierContext Field;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Args = new List<ExpressionContext>();
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MethodCallContext(AccessOrCallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessOrCallContext accessOrCall() {
		return accessOrCall(0);
	}

	private AccessOrCallContext accessOrCall(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AccessOrCallContext _localctx = new AccessOrCallContext(Context, _parentState);
		AccessOrCallContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_accessOrCall, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AccessOrCallSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 263; primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 301;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 299;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new AccessContext(new AccessOrCallContext(_parentctx, _parentState));
						((AccessContext)_localctx).Subject = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_accessOrCall);
						State = 265;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 266;
						((AccessContext)_localctx).Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__28 || _la==T__29) ) {
							((AccessContext)_localctx).Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 267; ((AccessContext)_localctx).Field = identifier();
						}
						break;
					case 2:
						{
						_localctx = new CallContext(new AccessOrCallContext(_parentctx, _parentState));
						((CallContext)_localctx).Callee = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_accessOrCall);
						State = 268;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 269; Match(T__30);
						State = 275;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 270; ((CallContext)_localctx)._expression = expression();
								((CallContext)_localctx)._Args.Add(((CallContext)_localctx)._expression);
								State = 271; Match(T__31);
								}
								} 
							}
							State = 277;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
						}
						State = 279;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__23) | (1L << T__27) | (1L << T__30) | (1L << T__33) | (1L << T__35) | (1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << STRING))) != 0)) {
							{
							State = 278; ((CallContext)_localctx)._expression = expression();
							((CallContext)_localctx)._Args.Add(((CallContext)_localctx)._expression);
							}
						}

						State = 281; Match(T__32);
						}
						break;
					case 3:
						{
						_localctx = new MethodCallContext(new AccessOrCallContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Subject = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_accessOrCall);
						State = 282;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 283; Match(T__2);
						State = 284; ((MethodCallContext)_localctx).Field = identifier();
						State = 285; Match(T__30);
						State = 291;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 286; ((MethodCallContext)_localctx)._expression = expression();
								((MethodCallContext)_localctx)._Args.Add(((MethodCallContext)_localctx)._expression);
								State = 287; Match(T__31);
								}
								} 
							}
							State = 293;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
						}
						State = 295;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__23) | (1L << T__27) | (1L << T__30) | (1L << T__33) | (1L << T__35) | (1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << STRING))) != 0)) {
							{
							State = 294; ((MethodCallContext)_localctx)._expression = expression();
							((MethodCallContext)_localctx)._Args.Add(((MethodCallContext)_localctx)._expression);
							}
						}

						State = 297; Match(T__32);
						}
						break;
					}
					} 
				}
				State = 303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public BreakExprContext breakExpr() {
			return GetRuleContext<BreakExprContext>(0);
		}
		public ContinueExprContext continueExpr() {
			return GetRuleContext<ContinueExprContext>(0);
		}
		public GroupedContext grouped() {
			return GetRuleContext<GroupedContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public LambdaWithBlockContext lambdaWithBlock() {
			return GetRuleContext<LambdaWithBlockContext>(0);
		}
		public LambdaWithExprContext lambdaWithExpr() {
			return GetRuleContext<LambdaWithExprContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ReturnExprContext returnExpr() {
			return GetRuleContext<ReturnExprContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_primary);
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; blockExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; breakExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306; continueExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 307; grouped();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 308; identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 309; ifExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 310; lambdaWithBlock();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 311; lambdaWithExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 312; literal();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 313; returnExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryWithBlockContext : ParserRuleContext {
		public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public LambdaWithBlockContext lambdaWithBlock() {
			return GetRuleContext<LambdaWithBlockContext>(0);
		}
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public PrimaryWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryWithBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryWithBlockContext primaryWithBlock() {
		PrimaryWithBlockContext _localctx = new PrimaryWithBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_primaryWithBlock);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316; blockExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; ifExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318; lambdaWithBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 319; record();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExprContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public ExpressionContext Value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExprContext blockExpr() {
		BlockExprContext _localctx = new BlockExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_blockExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(T__4);
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 323; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			State = 329; _localctx.Value = expression();
			State = 330; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakExprContext : ParserRuleContext {
		public IdentifierContext Label;
		public ITerminalNode BREAK() { return GetToken(StannumParser.BREAK, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakExprContext breakExpr() {
		BreakExprContext _localctx = new BreakExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_breakExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(BREAK);
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 333; _localctx.Label = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueExprContext : ParserRuleContext {
		public IdentifierContext Label;
		public ITerminalNode CONTINUE() { return GetToken(StannumParser.CONTINUE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueExprContext continueExpr() {
		ContinueExprContext _localctx = new ContinueExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_continueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(CONTINUE);
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 337; _localctx.Label = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedContext : ParserRuleContext {
		public ExpressionContext Value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedContext grouped() {
		GroupedContext _localctx = new GroupedContext(Context, State);
		EnterRule(_localctx, 52, RULE_grouped);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(T__30);
			State = 341; _localctx.Value = expression();
			State = 342; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(StannumParser.IDENTIFIER, 0); }
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_identifier);
		try {
			int _alt;
			State = 357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; Match(IDENTIFIER);
				State = 348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 345; keyword();
						}
						} 
					}
					State = 350;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351; Match(T__33);
				State = 353;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 352; keyword();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 355;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExprContext : ParserRuleContext {
		public IfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpr; } }
	 
		public IfExprContext() { }
		public virtual void CopyFrom(IfExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfElseIfExprContext : IfExprContext {
		public ExpressionContext Cond;
		public BlockExprContext Cons;
		public IfExprContext AltIf;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public IfElseIfExprContext(IfExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseExprContext : IfExprContext {
		public ExpressionContext Cond;
		public BlockExprContext Cons;
		public BlockExprContext Alt;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockExprContext[] blockExpr() {
			return GetRuleContexts<BlockExprContext>();
		}
		public BlockExprContext blockExpr(int i) {
			return GetRuleContext<BlockExprContext>(i);
		}
		public IfElseExprContext(IfExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExprContext ifExpr() {
		IfExprContext _localctx = new IfExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifExpr);
		try {
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				_localctx = new IfElseExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 359; Match(IF);
				State = 360; ((IfElseExprContext)_localctx).Cond = expression();
				State = 361; ((IfElseExprContext)_localctx).Cons = blockExpr();
				State = 362; Match(ELSE);
				State = 363; ((IfElseExprContext)_localctx).Alt = blockExpr();
				}
				break;
			case 2:
				_localctx = new IfElseIfExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; Match(IF);
				State = 366; ((IfElseIfExprContext)_localctx).Cond = expression();
				State = 367; ((IfElseIfExprContext)_localctx).Cons = blockExpr();
				State = 368; Match(ELSE);
				State = 369; ((IfElseIfExprContext)_localctx).AltIf = ifExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaWithBlockContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Params = new List<IdentifierContext>();
		public BlockStmtContext Body;
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public LambdaWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaWithBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaWithBlockContext lambdaWithBlock() {
		LambdaWithBlockContext _localctx = new LambdaWithBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_lambdaWithBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(T__30);
			State = 379;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 374; _localctx._identifier = identifier();
					_localctx._Params.Add(_localctx._identifier);
					State = 375; Match(T__31);
					}
					} 
				}
				State = 381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==IDENTIFIER) {
				{
				State = 382; _localctx._identifier = identifier();
				_localctx._Params.Add(_localctx._identifier);
				}
			}

			State = 385; Match(T__32);
			State = 386; _localctx.Body = blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaWithExprContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Params = new List<IdentifierContext>();
		public ExpressionContext Value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public LambdaWithExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaWithExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaWithExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaWithExprContext lambdaWithExpr() {
		LambdaWithExprContext _localctx = new LambdaWithExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_lambdaWithExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(T__30);
			State = 394;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 389; _localctx._identifier = identifier();
					_localctx._Params.Add(_localctx._identifier);
					State = 390; Match(T__31);
					}
					} 
				}
				State = 396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==IDENTIFIER) {
				{
				State = 397; _localctx._identifier = identifier();
				_localctx._Params.Add(_localctx._identifier);
				}
			}

			State = 400; Match(T__32);
			State = 401; Match(T__34);
			State = 402; _localctx.Value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberLitContext : LiteralContext {
		public ITerminalNode NUMBER() { return GetToken(StannumParser.NUMBER, 0); }
		public NumberLitContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListLitContext : LiteralContext {
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListLitContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordLitContext : LiteralContext {
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public RecordLitContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLitContext : LiteralContext {
		public ITerminalNode STRING() { return GetToken(StannumParser.STRING, 0); }
		public StringLitContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_literal);
		try {
			State = 408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumberLitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new StringLitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 405; Match(STRING);
				}
				break;
			case T__35:
				_localctx = new ListLitContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 406; list();
				}
				break;
			case T__4:
				_localctx = new RecordLitContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 407; record();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Elems = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 64, RULE_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(T__35);
			State = 416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 411; _localctx._expression = expression();
					_localctx._Elems.Add(_localctx._expression);
					State = 412; Match(T__31);
					}
					} 
				}
				State = 418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__23) | (1L << T__27) | (1L << T__30) | (1L << T__33) | (1L << T__35) | (1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 419; _localctx._expression = expression();
				_localctx._Elems.Add(_localctx._expression);
				}
			}

			State = 422; Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : ParserRuleContext {
		public RecordFieldContext _recordField;
		public IList<RecordFieldContext> _Fields = new List<RecordFieldContext>();
		public RecordFieldContext[] recordField() {
			return GetRuleContexts<RecordFieldContext>();
		}
		public RecordFieldContext recordField(int i) {
			return GetRuleContext<RecordFieldContext>(i);
		}
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 66, RULE_record);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(T__4);
			State = 430;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 425; _localctx._recordField = recordField();
					_localctx._Fields.Add(_localctx._recordField);
					State = 426; Match(T__31);
					}
					} 
				}
				State = 432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==IDENTIFIER) {
				{
				State = 433; _localctx._recordField = recordField();
				_localctx._Fields.Add(_localctx._recordField);
				}
			}

			State = 436; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordFieldContext : ParserRuleContext {
		public IdentifierContext Name;
		public ExpressionContext Value;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordField; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordFieldContext recordField() {
		RecordFieldContext _localctx = new RecordFieldContext(Context, State);
		EnterRule(_localctx, 68, RULE_recordField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; _localctx.Name = identifier();
			State = 439; Match(T__0);
			State = 440; _localctx.Value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExprContext : ParserRuleContext {
		public ExpressionContext Value;
		public ITerminalNode RETURN() { return GetToken(StannumParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExprContext returnExpr() {
		ReturnExprContext _localctx = new ReturnExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_returnExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(RETURN);
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 443; _localctx.Value = expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(StannumParser.IDENTIFIER, 0); }
		public ITerminalNode BREAK() { return GetToken(StannumParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(StannumParser.CONTINUE, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(StannumParser.FOR, 0); }
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode MATCH() { return GetToken(StannumParser.MATCH, 0); }
		public ITerminalNode RETURN() { return GetToken(StannumParser.RETURN, 0); }
		public ITerminalNode STRUCT() { return GetToken(StannumParser.STRUCT, 0); }
		public ITerminalNode VAR() { return GetToken(StannumParser.VAR, 0); }
		public ITerminalNode WHILE() { return GetToken(StannumParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 72, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << ELSE) | (1L << FOR) | (1L << IF) | (1L << MATCH) | (1L << RETURN) | (1L << STRUCT) | (1L << VAR) | (1L << WHILE) | (1L << IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return logicalOr__sempred((LogicalOr_Context)_localctx, predIndex);
		case 13: return logicalAnd__sempred((LogicalAnd_Context)_localctx, predIndex);
		case 14: return equality__sempred((Equality_Context)_localctx, predIndex);
		case 15: return relational__sempred((Relational_Context)_localctx, predIndex);
		case 16: return concatenative__sempred((Concatenative_Context)_localctx, predIndex);
		case 17: return additive__sempred((Additive_Context)_localctx, predIndex);
		case 18: return multiplicative__sempred((Multiplicative_Context)_localctx, predIndex);
		case 20: return accessOrCall_sempred((AccessOrCallContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicalOr__sempred(LogicalOr_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAnd__sempred(LogicalAnd_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality__sempred(Equality_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational__sempred(Relational_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool concatenative__sempred(Concatenative_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive__sempred(Additive_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicative__sempred(Multiplicative_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool accessOrCall_sempred(AccessOrCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x1C3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\a', '\x2', 'N', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', 'Q', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', 
		'\x3', 'V', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'Y', '\v', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\\', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x66', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'q', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'y', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x7F', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x93', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x98', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\xA0', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\xA3', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xAE', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB5', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\xBD', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xC0', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\xC8', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\xCB', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xD3', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\xD6', '\v', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\xDE', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xE1', 
		'\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xE9', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\xEC', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 
		'\xF4', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xF7', '\v', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\xFF', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x102', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x107', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x114', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x117', '\v', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x11A', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\x124', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x127', '\v', '\x16', '\x3', '\x16', '\x5', '\x16', '\x12A', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x12E', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\x131', '\v', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x13D', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x143', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\a', '\x19', '\x147', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x14A', 
		'\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x151', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x155', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', 
		'\x15D', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x160', '\v', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x6', '\x1D', '\x164', '\n', '\x1D', '\r', 
		'\x1D', '\xE', '\x1D', '\x165', '\x5', '\x1D', '\x168', '\n', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x176', '\n', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x17C', 
		'\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x17F', '\v', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x182', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', 
		'\x18B', '\n', ' ', '\f', ' ', '\xE', ' ', '\x18E', '\v', ' ', '\x3', 
		' ', '\x5', ' ', '\x191', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x19B', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\a', '\"', '\x1A1', '\n', '\"', '\f', '\"', '\xE', '\"', '\x1A4', '\v', 
		'\"', '\x3', '\"', '\x5', '\"', '\x1A7', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', '\x1AF', 
		'\n', '#', '\f', '#', '\xE', '#', '\x1B2', '\v', '#', '\x3', '#', '\x5', 
		'#', '\x1B5', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x5', '%', '\x1BF', '\n', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\x2', '\n', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '*', '\'', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', '\x2', '\n', 
		'\x3', '\x2', '\t', '\xE', '\x3', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\x14', '\x17', '\x3', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x1B', '\x1D', 
		'\x4', '\x2', '\x1A', '\x1A', '\x1E', '\x1E', '\x3', '\x2', '\x1F', ' ', 
		'\x3', '\x2', '(', '\x32', '\x2', '\x1DC', '\x2', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'W', '\x3', '\x2', '\x2', '\x2', '\x6', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'p', '\x3', '\x2', '\x2', '\x2', '\n', 'r', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'x', '\x3', '\x2', '\x2', '\x2', '\xE', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xD7', '\x3', '\x2', '\x2', '\x2', '\"', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xED', '\x3', '\x2', '\x2', '\x2', '&', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x108', '\x3', '\x2', '\x2', '\x2', ',', '\x13C', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x142', '\x3', '\x2', '\x2', '\x2', '\x30', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x152', '\x3', '\x2', '\x2', '\x2', '\x36', '\x156', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x167', '\x3', '\x2', '\x2', '\x2', ':', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x186', '\x3', '\x2', '\x2', '\x2', '@', '\x19A', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1BC', '\x3', '\x2', '\x2', '\x2', 'J', '\x1C0', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'N', '\x5', '\b', '\x5', '\x2', 'M', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x2', 
		'\x2', '\x3', 'S', '\x3', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x5', 
		'\x6', '\x4', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\\', '\x5', '\x14', '\v', '\x2', '[', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', 
		']', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x2', '\x2', '\x3', 
		'^', '\x5', '\x3', '\x2', '\x2', '\x2', '_', '\x66', '\x5', '\b', '\x5', 
		'\x2', '`', '\x66', '\x5', '\n', '\x6', '\x2', '\x61', '\x66', '\x5', 
		'\f', '\a', '\x2', '\x62', '\x66', '\x5', '\xE', '\b', '\x2', '\x63', 
		'\x66', '\x5', '\x10', '\t', '\x2', '\x64', '\x66', '\x5', '\x12', '\n', 
		'\x2', '\x65', '_', '\x3', '\x2', '\x2', '\x2', '\x65', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x61', '\x3', '\x2', '\x2', '\x2', '\x65', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\x5', '\x38', '\x1D', '\x2', 'h', 'i', '\a', 
		'\x3', '\x2', '\x2', 'i', 'j', '\x5', '\x14', '\v', '\x2', 'j', 'k', '\a', 
		'\x4', '\x2', '\x2', 'k', 'q', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', 
		'\x38', '\x1D', '\x2', 'm', 'n', '\a', '\x3', '\x2', '\x2', 'n', 'o', 
		'\x5', '.', '\x18', '\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 
		'g', '\x3', '\x2', '\x2', '\x2', 'p', 'l', '\x3', '\x2', '\x2', '\x2', 
		'q', '\t', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', '\x14', '\v', 
		'\x2', 's', 't', '\a', '\x4', '\x2', '\x2', 't', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x5', '\x38', '\x1D', '\x2', 'v', 'w', '\a', '\x5', 
		'\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 'x', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\a', '+', '\x2', '\x2', '{', '~', '\x5', '\x14', 
		'\v', '\x2', '|', '}', '\a', '\x6', '\x2', '\x2', '}', '\x7F', '\x5', 
		'\x38', '\x1D', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\x5', '\x12', '\n', '\x2', '\x81', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\a', ',', '\x2', '\x2', '\x83', '\x84', 
		'\x5', '\x14', '\v', '\x2', '\x84', '\x85', '\x5', '\x12', '\n', '\x2', 
		'\x85', '\x93', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', ',', 
		'\x2', '\x2', '\x87', '\x88', '\x5', '\x14', '\v', '\x2', '\x88', '\x89', 
		'\x5', '\x12', '\n', '\x2', '\x89', '\x8A', '\a', '*', '\x2', '\x2', '\x8A', 
		'\x8B', '\x5', '\x12', '\n', '\x2', '\x8B', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', ',', '\x2', '\x2', '\x8D', '\x8E', '\x5', 
		'\x14', '\v', '\x2', '\x8E', '\x8F', '\x5', '\x12', '\n', '\x2', '\x8F', 
		'\x90', '\a', '*', '\x2', '\x2', '\x90', '\x91', '\x5', '\xE', '\b', '\x2', 
		'\x91', '\x93', '\x3', '\x2', '\x2', '\x2', '\x92', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x86', '\x3', '\x2', '\x2', '\x2', '\x92', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x5', '\x38', '\x1D', '\x2', '\x95', '\x96', '\a', '\x5', 
		'\x2', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', '\x97', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '\x31', 
		'\x2', '\x2', '\x9A', '\x9B', '\x5', '\x14', '\v', '\x2', '\x9B', '\x9C', 
		'\x5', '\x12', '\n', '\x2', '\x9C', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\xA1', '\a', '\a', '\x2', '\x2', '\x9E', '\xA0', '\x5', '\x6', 
		'\x4', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\a', '\b', '\x2', '\x2', '\xA5', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA7', '\x5', '\x16', '\f', '\x2', '\xA7', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xAE', '\x5', '\x18', '\r', '\x2', '\xA9', '\xAA', 
		'\x5', '*', '\x16', '\x2', '\xAA', '\xAB', '\t', '\x2', '\x2', '\x2', 
		'\xAB', '\xAC', '\x5', '\x16', '\f', '\x2', '\xAC', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB5', '\x5', '\x1A', '\xE', '\x2', '\xB0', '\xB1', '\x5', '\x1A', 
		'\xE', '\x2', '\xB1', '\xB2', '\a', '\xF', '\x2', '\x2', '\xB2', '\xB3', 
		'\x5', '\x18', '\r', '\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\b', '\xE', '\x1', '\x2', '\xB7', '\xB8', '\x5', '\x1C', '\xF', '\x2', 
		'\xB8', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\f', '\x3', 
		'\x2', '\x2', '\xBA', '\xBB', '\a', '\x10', '\x2', '\x2', '\xBB', '\xBD', 
		'\x5', '\x1C', '\xF', '\x2', '\xBC', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC2', '\b', '\xF', '\x1', '\x2', '\xC2', '\xC3', '\x5', '\x1E', 
		'\x10', '\x2', '\xC3', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', 
		'\f', '\x3', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x11', '\x2', '\x2', 
		'\xC6', '\xC8', '\x5', '\x1E', '\x10', '\x2', '\xC7', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCD', '\b', '\x10', '\x1', '\x2', '\xCD', '\xCE', 
		'\x5', ' ', '\x11', '\x2', '\xCE', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xD0', '\f', '\x3', '\x2', '\x2', '\xD0', '\xD1', '\t', '\x3', 
		'\x2', '\x2', '\xD1', '\xD3', '\x5', ' ', '\x11', '\x2', '\xD2', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\b', '\x11', '\x1', '\x2', 
		'\xD8', '\xD9', '\x5', '\"', '\x12', '\x2', '\xD9', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDB', '\f', '\x3', '\x2', '\x2', '\xDB', '\xDC', 
		'\t', '\x4', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\"', '\x12', '\x2', 
		'\xDD', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '!', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\b', '\x12', '\x1', 
		'\x2', '\xE3', '\xE4', '\x5', '$', '\x13', '\x2', '\xE4', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE6', '\f', '\x3', '\x2', '\x2', '\xE6', 
		'\xE7', '\a', '\x18', '\x2', '\x2', '\xE7', '\xE9', '\x5', '$', '\x13', 
		'\x2', '\xE8', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\b', 
		'\x13', '\x1', '\x2', '\xEE', '\xEF', '\x5', '&', '\x14', '\x2', '\xEF', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\f', '\x3', '\x2', 
		'\x2', '\xF1', '\xF2', '\t', '\x5', '\x2', '\x2', '\xF2', '\xF4', '\x5', 
		'&', '\x14', '\x2', '\xF3', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\b', '\x14', '\x1', '\x2', '\xF9', '\xFA', '\x5', '(', '\x15', 
		'\x2', '\xFA', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\f', 
		'\x3', '\x2', '\x2', '\xFC', '\xFD', '\t', '\x6', '\x2', '\x2', '\xFD', 
		'\xFF', '\x5', '(', '\x15', '\x2', '\xFE', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x102', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x107', '\x5', '*', '\x16', '\x2', '\x104', '\x105', 
		'\t', '\a', '\x2', '\x2', '\x105', '\x107', '\x5', '(', '\x15', '\x2', 
		'\x106', '\x103', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x107', ')', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\b', '\x16', '\x1', '\x2', '\x109', '\x10A', '\x5', ',', '\x17', 
		'\x2', '\x10A', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', 
		'\f', '\x5', '\x2', '\x2', '\x10C', '\x10D', '\t', '\b', '\x2', '\x2', 
		'\x10D', '\x12E', '\x5', '\x38', '\x1D', '\x2', '\x10E', '\x10F', '\f', 
		'\x4', '\x2', '\x2', '\x10F', '\x115', '\a', '!', '\x2', '\x2', '\x110', 
		'\x111', '\x5', '\x14', '\v', '\x2', '\x111', '\x112', '\a', '\"', '\x2', 
		'\x2', '\x112', '\x114', '\x3', '\x2', '\x2', '\x2', '\x113', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x119', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', '\x5', '\x14', 
		'\v', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x12E', '\a', '#', '\x2', '\x2', '\x11C', '\x11D', '\f', '\x3', 
		'\x2', '\x2', '\x11D', '\x11E', '\a', '\x5', '\x2', '\x2', '\x11E', '\x11F', 
		'\x5', '\x38', '\x1D', '\x2', '\x11F', '\x125', '\a', '!', '\x2', '\x2', 
		'\x120', '\x121', '\x5', '\x14', '\v', '\x2', '\x121', '\x122', '\a', 
		'\"', '\x2', '\x2', '\x122', '\x124', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x124', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', '\x5', 
		'\x14', '\v', '\x2', '\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\a', '#', '\x2', '\x2', '\x12C', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x131', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '+', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', '\x2', 
		'\x2', '\x2', '\x132', '\x13D', '\x5', '\x30', '\x19', '\x2', '\x133', 
		'\x13D', '\x5', '\x32', '\x1A', '\x2', '\x134', '\x13D', '\x5', '\x34', 
		'\x1B', '\x2', '\x135', '\x13D', '\x5', '\x36', '\x1C', '\x2', '\x136', 
		'\x13D', '\x5', '\x38', '\x1D', '\x2', '\x137', '\x13D', '\x5', ':', '\x1E', 
		'\x2', '\x138', '\x13D', '\x5', '<', '\x1F', '\x2', '\x139', '\x13D', 
		'\x5', '>', ' ', '\x2', '\x13A', '\x13D', '\x5', '@', '!', '\x2', '\x13B', 
		'\x13D', '\x5', 'H', '%', '\x2', '\x13C', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x133', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x136', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13D', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x143', '\x5', '\x30', '\x19', '\x2', '\x13F', 
		'\x143', '\x5', ':', '\x1E', '\x2', '\x140', '\x143', '\x5', '<', '\x1F', 
		'\x2', '\x141', '\x143', '\x5', '\x44', '#', '\x2', '\x142', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '/', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x148', '\a', '\a', '\x2', '\x2', '\x145', '\x147', '\x5', '\x6', '\x4', 
		'\x2', '\x146', '\x145', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\x5', '\x14', '\v', '\x2', '\x14C', '\x14D', '\a', '\b', '\x2', 
		'\x2', '\x14D', '\x31', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x150', 
		'\a', '(', '\x2', '\x2', '\x14F', '\x151', '\x5', '\x38', '\x1D', '\x2', 
		'\x150', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x33', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x154', '\a', ')', '\x2', '\x2', '\x153', '\x155', '\x5', '\x38', '\x1D', 
		'\x2', '\x154', '\x153', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x157', '\a', '!', '\x2', '\x2', '\x157', '\x158', '\x5', '\x14', 
		'\v', '\x2', '\x158', '\x159', '\a', '#', '\x2', '\x2', '\x159', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15E', '\a', '\x32', '\x2', '\x2', 
		'\x15B', '\x15D', '\x5', 'J', '&', '\x2', '\x15C', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '\x15D', '\x160', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x168', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x163', '\a', '$', '\x2', '\x2', '\x162', 
		'\x164', '\x5', 'J', '&', '\x2', '\x163', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x168', '\x3', '\x2', '\x2', '\x2', '\x167', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x161', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\a', ',', '\x2', 
		'\x2', '\x16A', '\x16B', '\x5', '\x14', '\v', '\x2', '\x16B', '\x16C', 
		'\x5', '\x30', '\x19', '\x2', '\x16C', '\x16D', '\a', '*', '\x2', '\x2', 
		'\x16D', '\x16E', '\x5', '\x30', '\x19', '\x2', '\x16E', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x170', '\a', ',', '\x2', '\x2', '\x170', 
		'\x171', '\x5', '\x14', '\v', '\x2', '\x171', '\x172', '\x5', '\x30', 
		'\x19', '\x2', '\x172', '\x173', '\a', '*', '\x2', '\x2', '\x173', '\x174', 
		'\x5', ':', '\x1E', '\x2', '\x174', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x169', '\x3', '\x2', '\x2', '\x2', '\x175', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x176', ';', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x17D', '\a', '!', '\x2', '\x2', '\x178', '\x179', '\x5', '\x38', '\x1D', 
		'\x2', '\x179', '\x17A', '\a', '\"', '\x2', '\x2', '\x17A', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17B', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x182', '\x5', '\x38', '\x1D', '\x2', '\x181', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\a', '#', '\x2', 
		'\x2', '\x184', '\x185', '\x5', '\x12', '\n', '\x2', '\x185', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x18C', '\a', '!', '\x2', '\x2', '\x187', 
		'\x188', '\x5', '\x38', '\x1D', '\x2', '\x188', '\x189', '\a', '\"', '\x2', 
		'\x2', '\x189', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x18D', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18C', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x191', '\x5', '\x38', 
		'\x1D', '\x2', '\x190', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x193', '\a', '#', '\x2', '\x2', '\x193', '\x194', '\a', 
		'%', '\x2', '\x2', '\x194', '\x195', '\x5', '\x14', '\v', '\x2', '\x195', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x196', '\x19B', '\a', '\x33', '\x2', 
		'\x2', '\x197', '\x19B', '\a', '\x34', '\x2', '\x2', '\x198', '\x19B', 
		'\x5', '\x42', '\"', '\x2', '\x199', '\x19B', '\x5', '\x44', '#', '\x2', 
		'\x19A', '\x196', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x1A2', '\a', '&', '\x2', '\x2', '\x19D', '\x19E', '\x5', 
		'\x14', '\v', '\x2', '\x19E', '\x19F', '\a', '\"', '\x2', '\x2', '\x19F', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A7', '\x5', '\x14', '\v', '\x2', '\x1A6', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', 
		'\a', '\'', '\x2', '\x2', '\x1A9', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA', '\x1B0', '\a', '\a', '\x2', '\x2', '\x1AB', '\x1AC', '\x5', '\x46', 
		'$', '\x2', '\x1AC', '\x1AD', '\a', '\"', '\x2', '\x2', '\x1AD', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1AE', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1B3', '\x1B5', '\x5', '\x46', '$', '\x2', '\x1B4', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\a', 
		'\b', '\x2', '\x2', '\x1B7', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B9', '\x5', '\x38', '\x1D', '\x2', '\x1B9', '\x1BA', '\a', '\x3', 
		'\x2', '\x2', '\x1BA', '\x1BB', '\x5', '\x14', '\v', '\x2', '\x1BB', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BE', '\a', '.', '\x2', '\x2', 
		'\x1BD', '\x1BF', '\x5', '\x14', '\v', '\x2', '\x1BE', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\t', '\t', '\x2', 
		'\x2', '\x1C1', 'K', '\x3', '\x2', '\x2', '\x2', '/', 'O', 'W', '[', '\x65', 
		'p', 'x', '~', '\x92', '\x97', '\xA1', '\xAD', '\xB4', '\xBE', '\xC9', 
		'\xD4', '\xDF', '\xEA', '\xF5', '\x100', '\x106', '\x115', '\x119', '\x125', 
		'\x129', '\x12D', '\x12F', '\x13C', '\x142', '\x148', '\x150', '\x154', 
		'\x15E', '\x165', '\x167', '\x175', '\x17D', '\x181', '\x18C', '\x190', 
		'\x19A', '\x1A2', '\x1A6', '\x1B0', '\x1B4', '\x1BE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Stannum.Grammar
