//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\StannumParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Stannum.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class StannumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BREAK=1, CONTINUE=2, ELSE=3, FOR=4, IF=5, MATCH=6, RETURN=7, STRUCT=8, 
		VAR=9, WHILE=10, IDENTIFIER_START=11, NUMBER=12, STRING=13, Ampersand_Ampersand=14, 
		Asterisk=15, Asterisk_EqualsSign=16, AtSign=17, Colon=18, Colon_EqualsSign=19, 
		Comma=20, EqualsSign=21, EqualsSign_EqualsSign=22, EqualsSign_GreaterThanSign=23, 
		ExclamationMark=24, ExclamationMark_EqualsSign=25, GreaterThanSign=26, 
		GreaterThanSign_EqualsSign=27, HyphenMinus=28, HyphenMinus_EqualsSign=29, 
		HyphenMinus_GreaterThanSign=30, LeftBrace=31, LeftBracket=32, LeftParen=33, 
		LessThanSign=34, LessThanSign_EqualsSign=35, PercentSign=36, PercentSign_EqualsSign=37, 
		Period=38, PlusSign=39, PlusSign_EqualsSign=40, PlusSign_PlusSign=41, 
		QuestionMark_Period=42, QuestionMark_QuestionMark=43, RightBrace=44, RightBracket=45, 
		RightParen=46, Semicolon=47, Slash=48, Slash_EqualsSign=49, VerticleLine_VerticleLine=50, 
		WS=51, COMMENT=52, IDENTIFIER_REST=53;
	public const int
		RULE_program = 0, RULE_repl = 1, RULE_statement = 2, RULE_definition_ = 3, 
		RULE_exprStmt = 4, RULE_forStmt = 5, RULE_ifStmt_ = 6, RULE_whileStmt = 7, 
		RULE_blockStmt = 8, RULE_expression = 9, RULE_assignment_ = 10, RULE_coalesce_ = 11, 
		RULE_logicalOr_ = 12, RULE_logicalAnd_ = 13, RULE_equality_ = 14, RULE_relational_ = 15, 
		RULE_concatenative_ = 16, RULE_additive_ = 17, RULE_multiplicative_ = 18, 
		RULE_prefix_ = 19, RULE_accessOrCall = 20, RULE_primary = 21, RULE_primaryWithBlock = 22, 
		RULE_blockExpr = 23, RULE_breakExpr = 24, RULE_continueExpr = 25, RULE_grouped = 26, 
		RULE_identifier = 27, RULE_identifier_start = 28, RULE_identifier_rest = 29, 
		RULE_ifExpr = 30, RULE_lambdaWithBlock = 31, RULE_lambdaWithExpr = 32, 
		RULE_literal = 33, RULE_list = 34, RULE_record = 35, RULE_recordField = 36, 
		RULE_returnExpr = 37;
	public static readonly string[] ruleNames = {
		"program", "repl", "statement", "definition_", "exprStmt", "forStmt", 
		"ifStmt_", "whileStmt", "blockStmt", "expression", "assignment_", "coalesce_", 
		"logicalOr_", "logicalAnd_", "equality_", "relational_", "concatenative_", 
		"additive_", "multiplicative_", "prefix_", "accessOrCall", "primary", 
		"primaryWithBlock", "blockExpr", "breakExpr", "continueExpr", "grouped", 
		"identifier", "identifier_start", "identifier_rest", "ifExpr", "lambdaWithBlock", 
		"lambdaWithExpr", "literal", "list", "record", "recordField", "returnExpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'break'", "'continue'", "'else'", "'for'", "'if'", "'match'", "'return'", 
		"'struct'", "'var'", "'while'", null, null, null, "'&&'", "'*'", "'*='", 
		"'@'", "':'", "':='", "','", "'='", "'=='", "'=>'", "'!'", "'!='", "'>'", 
		"'>='", "'-'", "'-='", "'->'", "'{'", "'['", "'('", "'<'", "'<='", "'%'", 
		"'%='", "'.'", "'+'", "'+='", "'++'", "'?.'", "'??'", "'}'", "']'", "')'", 
		"';'", "'/'", "'/='", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BREAK", "CONTINUE", "ELSE", "FOR", "IF", "MATCH", "RETURN", "STRUCT", 
		"VAR", "WHILE", "IDENTIFIER_START", "NUMBER", "STRING", "Ampersand_Ampersand", 
		"Asterisk", "Asterisk_EqualsSign", "AtSign", "Colon", "Colon_EqualsSign", 
		"Comma", "EqualsSign", "EqualsSign_EqualsSign", "EqualsSign_GreaterThanSign", 
		"ExclamationMark", "ExclamationMark_EqualsSign", "GreaterThanSign", "GreaterThanSign_EqualsSign", 
		"HyphenMinus", "HyphenMinus_EqualsSign", "HyphenMinus_GreaterThanSign", 
		"LeftBrace", "LeftBracket", "LeftParen", "LessThanSign", "LessThanSign_EqualsSign", 
		"PercentSign", "PercentSign_EqualsSign", "Period", "PlusSign", "PlusSign_EqualsSign", 
		"PlusSign_PlusSign", "QuestionMark_Period", "QuestionMark_QuestionMark", 
		"RightBrace", "RightBracket", "RightParen", "Semicolon", "Slash", "Slash_EqualsSign", 
		"VerticleLine_VerticleLine", "WS", "COMMENT", "IDENTIFIER_REST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StannumParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StannumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StannumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StannumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Definition_Context _definition_;
		public IList<Definition_Context> _Defs = new List<Definition_Context>();
		public ITerminalNode Eof() { return GetToken(StannumParser.Eof, 0); }
		public Definition_Context[] definition_() {
			return GetRuleContexts<Definition_Context>();
		}
		public Definition_Context definition_(int i) {
			return GetRuleContext<Definition_Context>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER_START || _la==AtSign) {
				{
				{
				State = 76; _localctx._definition_ = definition_();
				_localctx._Defs.Add(_localctx._definition_);
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public ExpressionContext Value;
		public ITerminalNode Eof() { return GetToken(StannumParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplContext repl() {
		ReplContext _localctx = new ReplContext(Context, State);
		EnterRule(_localctx, 2, RULE_repl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 84; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << IDENTIFIER_START) | (1L << NUMBER) | (1L << STRING) | (1L << AtSign) | (1L << ExclamationMark) | (1L << HyphenMinus) | (1L << LeftBrace) | (1L << LeftBracket) | (1L << LeftParen))) != 0)) {
				{
				State = 90; _localctx.Value = expression();
				}
			}

			State = 93; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Definition_Context definition_() {
			return GetRuleContext<Definition_Context>(0);
		}
		public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		public IfStmt_Context ifStmt_() {
			return GetRuleContext<IfStmt_Context>(0);
		}
		public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; definition_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; exprStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; forStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98; ifStmt_();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 99; whileStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 100; blockStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_Context : ParserRuleContext {
		public Definition_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_; } }
	 
		public Definition_Context() { }
		public virtual void CopyFrom(Definition_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefinitionWithoutSemiContext : Definition_Context {
		public IdentifierContext Name;
		public PrimaryWithBlockContext Value;
		public ITerminalNode EqualsSign() { return GetToken(StannumParser.EqualsSign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PrimaryWithBlockContext primaryWithBlock() {
			return GetRuleContext<PrimaryWithBlockContext>(0);
		}
		public DefinitionWithoutSemiContext(Definition_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionWithoutSemi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionContext : Definition_Context {
		public IdentifierContext Name;
		public ExpressionContext Value;
		public ITerminalNode EqualsSign() { return GetToken(StannumParser.EqualsSign, 0); }
		public ITerminalNode Semicolon() { return GetToken(StannumParser.Semicolon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinitionContext(Definition_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_Context definition_() {
		Definition_Context _localctx = new Definition_Context(Context, State);
		EnterRule(_localctx, 6, RULE_definition_);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new DefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; ((DefinitionContext)_localctx).Name = identifier();
				State = 104; Match(EqualsSign);
				State = 105; ((DefinitionContext)_localctx).Value = expression();
				State = 106; Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new DefinitionWithoutSemiContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; ((DefinitionWithoutSemiContext)_localctx).Name = identifier();
				State = 109; Match(EqualsSign);
				State = 110; ((DefinitionWithoutSemiContext)_localctx).Value = primaryWithBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		public ExpressionContext Value;
		public ITerminalNode Semicolon() { return GetToken(StannumParser.Semicolon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_exprStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; _localctx.Value = expression();
			State = 115; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public IdentifierContext Label;
		public ExpressionContext Value;
		public IdentifierContext Var;
		public BlockStmtContext Body;
		public ITerminalNode FOR() { return GetToken(StannumParser.FOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(StannumParser.Colon, 0); }
		public ITerminalNode HyphenMinus_GreaterThanSign() { return GetToken(StannumParser.HyphenMinus_GreaterThanSign, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER_START || _la==AtSign) {
				{
				State = 117; _localctx.Label = identifier();
				State = 118; Match(Colon);
				}
			}

			State = 122; Match(FOR);
			State = 123; _localctx.Value = expression();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HyphenMinus_GreaterThanSign) {
				{
				State = 124; Match(HyphenMinus_GreaterThanSign);
				State = 125; _localctx.Var = identifier();
				}
			}

			State = 128; _localctx.Body = blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmt_Context : ParserRuleContext {
		public IfStmt_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt_; } }
	 
		public IfStmt_Context() { }
		public virtual void CopyFrom(IfStmt_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStmtContext : IfStmt_Context {
		public ExpressionContext Cond;
		public BlockStmtContext Cons;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public IfStmtContext(IfStmt_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStmtContext : IfStmt_Context {
		public ExpressionContext Cond;
		public BlockStmtContext Cons;
		public BlockStmtContext Alt;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public IfElseStmtContext(IfStmt_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseIfStmtContext : IfStmt_Context {
		public ExpressionContext Cond;
		public BlockStmtContext Cons;
		public IfStmt_Context AltIf;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public IfStmt_Context ifStmt_() {
			return GetRuleContext<IfStmt_Context>(0);
		}
		public IfElseIfStmtContext(IfStmt_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmt_Context ifStmt_() {
		IfStmt_Context _localctx = new IfStmt_Context(Context, State);
		EnterRule(_localctx, 12, RULE_ifStmt_);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; Match(IF);
				State = 131; ((IfStmtContext)_localctx).Cond = expression();
				State = 132; ((IfStmtContext)_localctx).Cons = blockStmt();
				}
				break;
			case 2:
				_localctx = new IfElseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; Match(IF);
				State = 135; ((IfElseStmtContext)_localctx).Cond = expression();
				State = 136; ((IfElseStmtContext)_localctx).Cons = blockStmt();
				State = 137; Match(ELSE);
				State = 138; ((IfElseStmtContext)_localctx).Alt = blockStmt();
				}
				break;
			case 3:
				_localctx = new IfElseIfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 140; Match(IF);
				State = 141; ((IfElseIfStmtContext)_localctx).Cond = expression();
				State = 142; ((IfElseIfStmtContext)_localctx).Cons = blockStmt();
				State = 143; Match(ELSE);
				State = 144; ((IfElseIfStmtContext)_localctx).AltIf = ifStmt_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public IdentifierContext Label;
		public ExpressionContext Value;
		public BlockStmtContext Body;
		public ITerminalNode WHILE() { return GetToken(StannumParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(StannumParser.Colon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_whileStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER_START || _la==AtSign) {
				{
				State = 148; _localctx.Label = identifier();
				State = 149; Match(Colon);
				}
			}

			State = 153; Match(WHILE);
			State = 154; _localctx.Value = expression();
			State = 155; _localctx.Body = blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public ITerminalNode LeftBrace() { return GetToken(StannumParser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(StannumParser.RightBrace, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_blockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(LeftBrace);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << FOR) | (1L << IF) | (1L << RETURN) | (1L << WHILE) | (1L << IDENTIFIER_START) | (1L << NUMBER) | (1L << STRING) | (1L << AtSign) | (1L << ExclamationMark) | (1L << HyphenMinus) | (1L << LeftBrace) | (1L << LeftBracket) | (1L << LeftParen))) != 0)) {
				{
				{
				State = 158; _localctx._statement = statement();
				_localctx._Stmts.Add(_localctx._statement);
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 164; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Assignment_Context assignment_() {
			return GetRuleContext<Assignment_Context>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; assignment_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_Context : ParserRuleContext {
		public Assignment_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_; } }
	 
		public Assignment_Context() { }
		public virtual void CopyFrom(Assignment_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentContext : Assignment_Context {
		public AccessOrCallContext Left;
		public IToken Op;
		public Assignment_Context Right;
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public Assignment_Context assignment_() {
			return GetRuleContext<Assignment_Context>(0);
		}
		public ITerminalNode Colon_EqualsSign() { return GetToken(StannumParser.Colon_EqualsSign, 0); }
		public ITerminalNode PlusSign_EqualsSign() { return GetToken(StannumParser.PlusSign_EqualsSign, 0); }
		public ITerminalNode HyphenMinus_EqualsSign() { return GetToken(StannumParser.HyphenMinus_EqualsSign, 0); }
		public ITerminalNode Asterisk_EqualsSign() { return GetToken(StannumParser.Asterisk_EqualsSign, 0); }
		public ITerminalNode Slash_EqualsSign() { return GetToken(StannumParser.Slash_EqualsSign, 0); }
		public ITerminalNode PercentSign_EqualsSign() { return GetToken(StannumParser.PercentSign_EqualsSign, 0); }
		public AssignmentContext(Assignment_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentSkipContext : Assignment_Context {
		public Coalesce_Context coalesce_() {
			return GetRuleContext<Coalesce_Context>(0);
		}
		public AssignmentSkipContext(Assignment_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_Context assignment_() {
		Assignment_Context _localctx = new Assignment_Context(Context, State);
		EnterRule(_localctx, 20, RULE_assignment_);
		int _la;
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new AssignmentSkipContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 168; coalesce_();
				}
				break;
			case 2:
				_localctx = new AssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; ((AssignmentContext)_localctx).Left = accessOrCall(0);
				State = 170;
				((AssignmentContext)_localctx).Op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Asterisk_EqualsSign) | (1L << Colon_EqualsSign) | (1L << HyphenMinus_EqualsSign) | (1L << PercentSign_EqualsSign) | (1L << PlusSign_EqualsSign) | (1L << Slash_EqualsSign))) != 0)) ) {
					((AssignmentContext)_localctx).Op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 171; ((AssignmentContext)_localctx).Right = assignment_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coalesce_Context : ParserRuleContext {
		public Coalesce_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coalesce_; } }
	 
		public Coalesce_Context() { }
		public virtual void CopyFrom(Coalesce_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoalesceSkipContext : Coalesce_Context {
		public LogicalOr_Context logicalOr_() {
			return GetRuleContext<LogicalOr_Context>(0);
		}
		public CoalesceSkipContext(Coalesce_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceContext : Coalesce_Context {
		public LogicalOr_Context Left;
		public Coalesce_Context Right;
		public ITerminalNode QuestionMark_QuestionMark() { return GetToken(StannumParser.QuestionMark_QuestionMark, 0); }
		public LogicalOr_Context logicalOr_() {
			return GetRuleContext<LogicalOr_Context>(0);
		}
		public Coalesce_Context coalesce_() {
			return GetRuleContext<Coalesce_Context>(0);
		}
		public CoalesceContext(Coalesce_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coalesce_Context coalesce_() {
		Coalesce_Context _localctx = new Coalesce_Context(Context, State);
		EnterRule(_localctx, 22, RULE_coalesce_);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new CoalesceSkipContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; logicalOr_(0);
				}
				break;
			case 2:
				_localctx = new CoalesceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; ((CoalesceContext)_localctx).Left = logicalOr_(0);
				State = 177; Match(QuestionMark_QuestionMark);
				State = 178; ((CoalesceContext)_localctx).Right = coalesce_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOr_Context : ParserRuleContext {
		public LogicalOr_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOr_; } }
	 
		public LogicalOr_Context() { }
		public virtual void CopyFrom(LogicalOr_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalOrSkipContext : LogicalOr_Context {
		public LogicalAnd_Context logicalAnd_() {
			return GetRuleContext<LogicalAnd_Context>(0);
		}
		public LogicalOrSkipContext(LogicalOr_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrContext : LogicalOr_Context {
		public LogicalOr_Context Left;
		public LogicalAnd_Context Right;
		public ITerminalNode VerticleLine_VerticleLine() { return GetToken(StannumParser.VerticleLine_VerticleLine, 0); }
		public LogicalOr_Context logicalOr_() {
			return GetRuleContext<LogicalOr_Context>(0);
		}
		public LogicalAnd_Context logicalAnd_() {
			return GetRuleContext<LogicalAnd_Context>(0);
		}
		public LogicalOrContext(LogicalOr_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOr_Context logicalOr_() {
		return logicalOr_(0);
	}

	private LogicalOr_Context logicalOr_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOr_Context _localctx = new LogicalOr_Context(Context, _parentState);
		LogicalOr_Context _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_logicalOr_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LogicalOrSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 183; logicalAnd_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrContext(new LogicalOr_Context(_parentctx, _parentState));
					((LogicalOrContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOr_);
					State = 185;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 186; Match(VerticleLine_VerticleLine);
					State = 187; ((LogicalOrContext)_localctx).Right = logicalAnd_(0);
					}
					} 
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAnd_Context : ParserRuleContext {
		public LogicalAnd_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAnd_; } }
	 
		public LogicalAnd_Context() { }
		public virtual void CopyFrom(LogicalAnd_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalAndContext : LogicalAnd_Context {
		public LogicalAnd_Context Left;
		public Equality_Context Right;
		public ITerminalNode Ampersand_Ampersand() { return GetToken(StannumParser.Ampersand_Ampersand, 0); }
		public LogicalAnd_Context logicalAnd_() {
			return GetRuleContext<LogicalAnd_Context>(0);
		}
		public Equality_Context equality_() {
			return GetRuleContext<Equality_Context>(0);
		}
		public LogicalAndContext(LogicalAnd_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndSkipContext : LogicalAnd_Context {
		public Equality_Context equality_() {
			return GetRuleContext<Equality_Context>(0);
		}
		public LogicalAndSkipContext(LogicalAnd_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAnd_Context logicalAnd_() {
		return logicalAnd_(0);
	}

	private LogicalAnd_Context logicalAnd_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAnd_Context _localctx = new LogicalAnd_Context(Context, _parentState);
		LogicalAnd_Context _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_logicalAnd_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LogicalAndSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 194; equality_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndContext(new LogicalAnd_Context(_parentctx, _parentState));
					((LogicalAndContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAnd_);
					State = 196;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 197; Match(Ampersand_Ampersand);
					State = 198; ((LogicalAndContext)_localctx).Right = equality_(0);
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_Context : ParserRuleContext {
		public Equality_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_; } }
	 
		public Equality_Context() { }
		public virtual void CopyFrom(Equality_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualitySkipContext : Equality_Context {
		public Relational_Context relational_() {
			return GetRuleContext<Relational_Context>(0);
		}
		public EqualitySkipContext(Equality_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualitySkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : Equality_Context {
		public Equality_Context Left;
		public IToken Op;
		public Relational_Context Right;
		public Equality_Context equality_() {
			return GetRuleContext<Equality_Context>(0);
		}
		public Relational_Context relational_() {
			return GetRuleContext<Relational_Context>(0);
		}
		public ITerminalNode EqualsSign_EqualsSign() { return GetToken(StannumParser.EqualsSign_EqualsSign, 0); }
		public ITerminalNode ExclamationMark_EqualsSign() { return GetToken(StannumParser.ExclamationMark_EqualsSign, 0); }
		public EqualityContext(Equality_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_Context equality_() {
		return equality_(0);
	}

	private Equality_Context equality_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_Context _localctx = new Equality_Context(Context, _parentState);
		Equality_Context _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_equality_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new EqualitySkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 205; relational_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EqualityContext(new Equality_Context(_parentctx, _parentState));
					((EqualityContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_equality_);
					State = 207;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 208;
					((EqualityContext)_localctx).Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==EqualsSign_EqualsSign || _la==ExclamationMark_EqualsSign) ) {
						((EqualityContext)_localctx).Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 209; ((EqualityContext)_localctx).Right = relational_(0);
					}
					} 
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_Context : ParserRuleContext {
		public Relational_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_; } }
	 
		public Relational_Context() { }
		public virtual void CopyFrom(Relational_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelationalContext : Relational_Context {
		public Relational_Context Left;
		public IToken Op;
		public Concatenative_Context Right;
		public Relational_Context relational_() {
			return GetRuleContext<Relational_Context>(0);
		}
		public Concatenative_Context concatenative_() {
			return GetRuleContext<Concatenative_Context>(0);
		}
		public ITerminalNode LessThanSign() { return GetToken(StannumParser.LessThanSign, 0); }
		public ITerminalNode GreaterThanSign() { return GetToken(StannumParser.GreaterThanSign, 0); }
		public ITerminalNode LessThanSign_EqualsSign() { return GetToken(StannumParser.LessThanSign_EqualsSign, 0); }
		public ITerminalNode GreaterThanSign_EqualsSign() { return GetToken(StannumParser.GreaterThanSign_EqualsSign, 0); }
		public RelationalContext(Relational_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalSkipContext : Relational_Context {
		public Concatenative_Context concatenative_() {
			return GetRuleContext<Concatenative_Context>(0);
		}
		public RelationalSkipContext(Relational_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_Context relational_() {
		return relational_(0);
	}

	private Relational_Context relational_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_Context _localctx = new Relational_Context(Context, _parentState);
		Relational_Context _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_relational_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RelationalSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 216; concatenative_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 223;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationalContext(new Relational_Context(_parentctx, _parentState));
					((RelationalContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relational_);
					State = 218;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 219;
					((RelationalContext)_localctx).Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterThanSign) | (1L << GreaterThanSign_EqualsSign) | (1L << LessThanSign) | (1L << LessThanSign_EqualsSign))) != 0)) ) {
						((RelationalContext)_localctx).Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 220; ((RelationalContext)_localctx).Right = concatenative_(0);
					}
					} 
				}
				State = 225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Concatenative_Context : ParserRuleContext {
		public Concatenative_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenative_; } }
	 
		public Concatenative_Context() { }
		public virtual void CopyFrom(Concatenative_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcatenativeSkipContext : Concatenative_Context {
		public Additive_Context additive_() {
			return GetRuleContext<Additive_Context>(0);
		}
		public ConcatenativeSkipContext(Concatenative_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenativeSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenativeContext : Concatenative_Context {
		public Concatenative_Context Left;
		public Additive_Context Right;
		public ITerminalNode PlusSign_PlusSign() { return GetToken(StannumParser.PlusSign_PlusSign, 0); }
		public Concatenative_Context concatenative_() {
			return GetRuleContext<Concatenative_Context>(0);
		}
		public Additive_Context additive_() {
			return GetRuleContext<Additive_Context>(0);
		}
		public ConcatenativeContext(Concatenative_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Concatenative_Context concatenative_() {
		return concatenative_(0);
	}

	private Concatenative_Context concatenative_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Concatenative_Context _localctx = new Concatenative_Context(Context, _parentState);
		Concatenative_Context _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_concatenative_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ConcatenativeSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 227; additive_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConcatenativeContext(new Concatenative_Context(_parentctx, _parentState));
					((ConcatenativeContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_concatenative_);
					State = 229;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 230; Match(PlusSign_PlusSign);
					State = 231; ((ConcatenativeContext)_localctx).Right = additive_(0);
					}
					} 
				}
				State = 236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_Context : ParserRuleContext {
		public Additive_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_; } }
	 
		public Additive_Context() { }
		public virtual void CopyFrom(Additive_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class AdditiveSkipContext : Additive_Context {
		public Multiplicative_Context multiplicative_() {
			return GetRuleContext<Multiplicative_Context>(0);
		}
		public AdditiveSkipContext(Additive_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveContext : Additive_Context {
		public Additive_Context Left;
		public IToken Op;
		public Multiplicative_Context Right;
		public Additive_Context additive_() {
			return GetRuleContext<Additive_Context>(0);
		}
		public Multiplicative_Context multiplicative_() {
			return GetRuleContext<Multiplicative_Context>(0);
		}
		public ITerminalNode PlusSign() { return GetToken(StannumParser.PlusSign, 0); }
		public ITerminalNode HyphenMinus() { return GetToken(StannumParser.HyphenMinus, 0); }
		public AdditiveContext(Additive_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_Context additive_() {
		return additive_(0);
	}

	private Additive_Context additive_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_Context _localctx = new Additive_Context(Context, _parentState);
		Additive_Context _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_additive_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AdditiveSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 238; multiplicative_(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditiveContext(new Additive_Context(_parentctx, _parentState));
					((AdditiveContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additive_);
					State = 240;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 241;
					((AdditiveContext)_localctx).Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==HyphenMinus || _la==PlusSign) ) {
						((AdditiveContext)_localctx).Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 242; ((AdditiveContext)_localctx).Right = multiplicative_(0);
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_Context : ParserRuleContext {
		public Multiplicative_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_; } }
	 
		public Multiplicative_Context() { }
		public virtual void CopyFrom(Multiplicative_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiplicativeContext : Multiplicative_Context {
		public Multiplicative_Context Left;
		public IToken Op;
		public Prefix_Context Right;
		public Multiplicative_Context multiplicative_() {
			return GetRuleContext<Multiplicative_Context>(0);
		}
		public Prefix_Context prefix_() {
			return GetRuleContext<Prefix_Context>(0);
		}
		public ITerminalNode Asterisk() { return GetToken(StannumParser.Asterisk, 0); }
		public ITerminalNode Slash() { return GetToken(StannumParser.Slash, 0); }
		public ITerminalNode PercentSign() { return GetToken(StannumParser.PercentSign, 0); }
		public MultiplicativeContext(Multiplicative_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeSkipContext : Multiplicative_Context {
		public Prefix_Context prefix_() {
			return GetRuleContext<Prefix_Context>(0);
		}
		public MultiplicativeSkipContext(Multiplicative_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_Context multiplicative_() {
		return multiplicative_(0);
	}

	private Multiplicative_Context multiplicative_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_Context _localctx = new Multiplicative_Context(Context, _parentState);
		Multiplicative_Context _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_multiplicative_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new MultiplicativeSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 249; prefix_();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicativeContext(new Multiplicative_Context(_parentctx, _parentState));
					((MultiplicativeContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_);
					State = 251;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 252;
					((MultiplicativeContext)_localctx).Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Asterisk) | (1L << PercentSign) | (1L << Slash))) != 0)) ) {
						((MultiplicativeContext)_localctx).Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 253; ((MultiplicativeContext)_localctx).Right = prefix_();
					}
					} 
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Prefix_Context : ParserRuleContext {
		public Prefix_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_; } }
	 
		public Prefix_Context() { }
		public virtual void CopyFrom(Prefix_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrefixContext : Prefix_Context {
		public IToken Op;
		public Prefix_Context Operand;
		public Prefix_Context prefix_() {
			return GetRuleContext<Prefix_Context>(0);
		}
		public ITerminalNode ExclamationMark() { return GetToken(StannumParser.ExclamationMark, 0); }
		public ITerminalNode HyphenMinus() { return GetToken(StannumParser.HyphenMinus, 0); }
		public PrefixContext(Prefix_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixSkipContext : Prefix_Context {
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public PrefixSkipContext(Prefix_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_Context prefix_() {
		Prefix_Context _localctx = new Prefix_Context(Context, State);
		EnterRule(_localctx, 38, RULE_prefix_);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BREAK:
			case CONTINUE:
			case IF:
			case RETURN:
			case IDENTIFIER_START:
			case NUMBER:
			case STRING:
			case AtSign:
			case LeftBrace:
			case LeftBracket:
			case LeftParen:
				_localctx = new PrefixSkipContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; accessOrCall(0);
				}
				break;
			case ExclamationMark:
			case HyphenMinus:
				_localctx = new PrefixContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				((PrefixContext)_localctx).Op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ExclamationMark || _la==HyphenMinus) ) {
					((PrefixContext)_localctx).Op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 261; ((PrefixContext)_localctx).Operand = prefix_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessOrCallContext : ParserRuleContext {
		public AccessOrCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessOrCall; } }
	 
		public AccessOrCallContext() { }
		public virtual void CopyFrom(AccessOrCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : AccessOrCallContext {
		public AccessOrCallContext Callee;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Args = new List<ExpressionContext>();
		public ITerminalNode LeftParen() { return GetToken(StannumParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(StannumParser.RightParen, 0); }
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(StannumParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(StannumParser.Comma, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CallContext(AccessOrCallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessOrCallSkipContext : AccessOrCallContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public AccessOrCallSkipContext(AccessOrCallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessOrCallSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessContext : AccessOrCallContext {
		public AccessOrCallContext Subject;
		public IToken Op;
		public IdentifierContext Field;
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Period() { return GetToken(StannumParser.Period, 0); }
		public ITerminalNode QuestionMark_Period() { return GetToken(StannumParser.QuestionMark_Period, 0); }
		public AccessContext(AccessOrCallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallContext : AccessOrCallContext {
		public AccessOrCallContext Subject;
		public IdentifierContext Field;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Args = new List<ExpressionContext>();
		public ITerminalNode Colon() { return GetToken(StannumParser.Colon, 0); }
		public ITerminalNode LeftParen() { return GetToken(StannumParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(StannumParser.RightParen, 0); }
		public AccessOrCallContext accessOrCall() {
			return GetRuleContext<AccessOrCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(StannumParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(StannumParser.Comma, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MethodCallContext(AccessOrCallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessOrCallContext accessOrCall() {
		return accessOrCall(0);
	}

	private AccessOrCallContext accessOrCall(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AccessOrCallContext _localctx = new AccessOrCallContext(Context, _parentState);
		AccessOrCallContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_accessOrCall, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AccessOrCallSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 265; primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 303;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 301;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new AccessContext(new AccessOrCallContext(_parentctx, _parentState));
						((AccessContext)_localctx).Subject = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_accessOrCall);
						State = 267;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 268;
						((AccessContext)_localctx).Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Period || _la==QuestionMark_Period) ) {
							((AccessContext)_localctx).Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 269; ((AccessContext)_localctx).Field = identifier();
						}
						break;
					case 2:
						{
						_localctx = new CallContext(new AccessOrCallContext(_parentctx, _parentState));
						((CallContext)_localctx).Callee = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_accessOrCall);
						State = 270;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 271; Match(LeftParen);
						State = 277;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 272; ((CallContext)_localctx)._expression = expression();
								((CallContext)_localctx)._Args.Add(((CallContext)_localctx)._expression);
								State = 273; Match(Comma);
								}
								} 
							}
							State = 279;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
						}
						State = 281;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << IDENTIFIER_START) | (1L << NUMBER) | (1L << STRING) | (1L << AtSign) | (1L << ExclamationMark) | (1L << HyphenMinus) | (1L << LeftBrace) | (1L << LeftBracket) | (1L << LeftParen))) != 0)) {
							{
							State = 280; ((CallContext)_localctx)._expression = expression();
							((CallContext)_localctx)._Args.Add(((CallContext)_localctx)._expression);
							}
						}

						State = 283; Match(RightParen);
						}
						break;
					case 3:
						{
						_localctx = new MethodCallContext(new AccessOrCallContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Subject = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_accessOrCall);
						State = 284;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 285; Match(Colon);
						State = 286; ((MethodCallContext)_localctx).Field = identifier();
						State = 287; Match(LeftParen);
						State = 293;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 288; ((MethodCallContext)_localctx)._expression = expression();
								((MethodCallContext)_localctx)._Args.Add(((MethodCallContext)_localctx)._expression);
								State = 289; Match(Comma);
								}
								} 
							}
							State = 295;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
						}
						State = 297;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << IDENTIFIER_START) | (1L << NUMBER) | (1L << STRING) | (1L << AtSign) | (1L << ExclamationMark) | (1L << HyphenMinus) | (1L << LeftBrace) | (1L << LeftBracket) | (1L << LeftParen))) != 0)) {
							{
							State = 296; ((MethodCallContext)_localctx)._expression = expression();
							((MethodCallContext)_localctx)._Args.Add(((MethodCallContext)_localctx)._expression);
							}
						}

						State = 299; Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public BreakExprContext breakExpr() {
			return GetRuleContext<BreakExprContext>(0);
		}
		public ContinueExprContext continueExpr() {
			return GetRuleContext<ContinueExprContext>(0);
		}
		public GroupedContext grouped() {
			return GetRuleContext<GroupedContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public LambdaWithBlockContext lambdaWithBlock() {
			return GetRuleContext<LambdaWithBlockContext>(0);
		}
		public LambdaWithExprContext lambdaWithExpr() {
			return GetRuleContext<LambdaWithExprContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ReturnExprContext returnExpr() {
			return GetRuleContext<ReturnExprContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_primary);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; blockExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307; breakExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308; continueExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 309; grouped();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 310; identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 311; ifExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 312; lambdaWithBlock();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 313; lambdaWithExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 314; literal();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 315; returnExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryWithBlockContext : ParserRuleContext {
		public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public LambdaWithBlockContext lambdaWithBlock() {
			return GetRuleContext<LambdaWithBlockContext>(0);
		}
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public PrimaryWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryWithBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryWithBlockContext primaryWithBlock() {
		PrimaryWithBlockContext _localctx = new PrimaryWithBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_primaryWithBlock);
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; blockExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; ifExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 320; lambdaWithBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 321; record();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExprContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public ExpressionContext Value;
		public ITerminalNode LeftBrace() { return GetToken(StannumParser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(StannumParser.RightBrace, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExprContext blockExpr() {
		BlockExprContext _localctx = new BlockExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_blockExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(LeftBrace);
			State = 328;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 325; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			State = 331; _localctx.Value = expression();
			State = 332; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakExprContext : ParserRuleContext {
		public IdentifierContext Label;
		public ITerminalNode BREAK() { return GetToken(StannumParser.BREAK, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakExprContext breakExpr() {
		BreakExprContext _localctx = new BreakExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_breakExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(BREAK);
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 335; _localctx.Label = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueExprContext : ParserRuleContext {
		public IdentifierContext Label;
		public ITerminalNode CONTINUE() { return GetToken(StannumParser.CONTINUE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueExprContext continueExpr() {
		ContinueExprContext _localctx = new ContinueExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_continueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(CONTINUE);
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 339; _localctx.Label = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedContext : ParserRuleContext {
		public ExpressionContext Value;
		public ITerminalNode LeftParen() { return GetToken(StannumParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(StannumParser.RightParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedContext grouped() {
		GroupedContext _localctx = new GroupedContext(Context, State);
		EnterRule(_localctx, 52, RULE_grouped);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(LeftParen);
			State = 343; _localctx.Value = expression();
			State = 344; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public Identifier_startContext identifier_start() {
			return GetRuleContext<Identifier_startContext>(0);
		}
		public Identifier_restContext identifier_rest() {
			return GetRuleContext<Identifier_restContext>(0);
		}
		public ITerminalNode AtSign() { return GetToken(StannumParser.AtSign, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_identifier);
		try {
			State = 351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346; identifier_start();
				State = 347; identifier_rest();
				}
				break;
			case AtSign:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; Match(AtSign);
				State = 350; identifier_rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_startContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_START() { return GetToken(StannumParser.IDENTIFIER_START, 0); }
		public Identifier_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_startContext identifier_start() {
		Identifier_startContext _localctx = new Identifier_startContext(Context, State);
		EnterRule(_localctx, 56, RULE_identifier_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(IDENTIFIER_START);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_restContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_REST() { return GetToken(StannumParser.IDENTIFIER_REST, 0); }
		public Identifier_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_rest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_rest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_restContext identifier_rest() {
		Identifier_restContext _localctx = new Identifier_restContext(Context, State);
		EnterRule(_localctx, 58, RULE_identifier_rest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(IDENTIFIER_REST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExprContext : ParserRuleContext {
		public IfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpr; } }
	 
		public IfExprContext() { }
		public virtual void CopyFrom(IfExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfElseIfExprContext : IfExprContext {
		public ExpressionContext Cond;
		public BlockExprContext Cons;
		public IfExprContext AltIf;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public IfElseIfExprContext(IfExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseExprContext : IfExprContext {
		public ExpressionContext Cond;
		public BlockExprContext Cons;
		public BlockExprContext Alt;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockExprContext[] blockExpr() {
			return GetRuleContexts<BlockExprContext>();
		}
		public BlockExprContext blockExpr(int i) {
			return GetRuleContext<BlockExprContext>(i);
		}
		public IfElseExprContext(IfExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExprContext ifExpr() {
		IfExprContext _localctx = new IfExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_ifExpr);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				_localctx = new IfElseExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; Match(IF);
				State = 358; ((IfElseExprContext)_localctx).Cond = expression();
				State = 359; ((IfElseExprContext)_localctx).Cons = blockExpr();
				State = 360; Match(ELSE);
				State = 361; ((IfElseExprContext)_localctx).Alt = blockExpr();
				}
				break;
			case 2:
				_localctx = new IfElseIfExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; Match(IF);
				State = 364; ((IfElseIfExprContext)_localctx).Cond = expression();
				State = 365; ((IfElseIfExprContext)_localctx).Cons = blockExpr();
				State = 366; Match(ELSE);
				State = 367; ((IfElseIfExprContext)_localctx).AltIf = ifExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaWithBlockContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Params = new List<IdentifierContext>();
		public BlockStmtContext Body;
		public ITerminalNode LeftParen() { return GetToken(StannumParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(StannumParser.RightParen, 0); }
		public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(StannumParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(StannumParser.Comma, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public LambdaWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaWithBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaWithBlockContext lambdaWithBlock() {
		LambdaWithBlockContext _localctx = new LambdaWithBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_lambdaWithBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(LeftParen);
			State = 377;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 372; _localctx._identifier = identifier();
					_localctx._Params.Add(_localctx._identifier);
					State = 373; Match(Comma);
					}
					} 
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER_START || _la==AtSign) {
				{
				State = 380; _localctx._identifier = identifier();
				_localctx._Params.Add(_localctx._identifier);
				}
			}

			State = 383; Match(RightParen);
			State = 384; _localctx.Body = blockStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaWithExprContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Params = new List<IdentifierContext>();
		public ExpressionContext Value;
		public ITerminalNode LeftParen() { return GetToken(StannumParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(StannumParser.RightParen, 0); }
		public ITerminalNode EqualsSign_GreaterThanSign() { return GetToken(StannumParser.EqualsSign_GreaterThanSign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(StannumParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(StannumParser.Comma, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public LambdaWithExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaWithExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaWithExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaWithExprContext lambdaWithExpr() {
		LambdaWithExprContext _localctx = new LambdaWithExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_lambdaWithExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(LeftParen);
			State = 392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 387; _localctx._identifier = identifier();
					_localctx._Params.Add(_localctx._identifier);
					State = 388; Match(Comma);
					}
					} 
				}
				State = 394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER_START || _la==AtSign) {
				{
				State = 395; _localctx._identifier = identifier();
				_localctx._Params.Add(_localctx._identifier);
				}
			}

			State = 398; Match(RightParen);
			State = 399; Match(EqualsSign_GreaterThanSign);
			State = 400; _localctx.Value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberLitContext : LiteralContext {
		public ITerminalNode NUMBER() { return GetToken(StannumParser.NUMBER, 0); }
		public NumberLitContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListLitContext : LiteralContext {
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListLitContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordLitContext : LiteralContext {
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public RecordLitContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLitContext : LiteralContext {
		public ITerminalNode STRING() { return GetToken(StannumParser.STRING, 0); }
		public StringLitContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 66, RULE_literal);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumberLitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 402; Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new StringLitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 403; Match(STRING);
				}
				break;
			case LeftBracket:
				_localctx = new ListLitContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 404; list();
				}
				break;
			case LeftBrace:
				_localctx = new RecordLitContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 405; record();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Elems = new List<ExpressionContext>();
		public ITerminalNode LeftBracket() { return GetToken(StannumParser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(StannumParser.RightBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(StannumParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(StannumParser.Comma, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 68, RULE_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(LeftBracket);
			State = 414;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 409; _localctx._expression = expression();
					_localctx._Elems.Add(_localctx._expression);
					State = 410; Match(Comma);
					}
					} 
				}
				State = 416;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << RETURN) | (1L << IDENTIFIER_START) | (1L << NUMBER) | (1L << STRING) | (1L << AtSign) | (1L << ExclamationMark) | (1L << HyphenMinus) | (1L << LeftBrace) | (1L << LeftBracket) | (1L << LeftParen))) != 0)) {
				{
				State = 417; _localctx._expression = expression();
				_localctx._Elems.Add(_localctx._expression);
				}
			}

			State = 420; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : ParserRuleContext {
		public RecordFieldContext _recordField;
		public IList<RecordFieldContext> _Fields = new List<RecordFieldContext>();
		public ITerminalNode LeftBrace() { return GetToken(StannumParser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(StannumParser.RightBrace, 0); }
		public ITerminalNode[] Comma() { return GetTokens(StannumParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(StannumParser.Comma, i);
		}
		public RecordFieldContext[] recordField() {
			return GetRuleContexts<RecordFieldContext>();
		}
		public RecordFieldContext recordField(int i) {
			return GetRuleContext<RecordFieldContext>(i);
		}
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 70, RULE_record);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(LeftBrace);
			State = 428;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 423; _localctx._recordField = recordField();
					_localctx._Fields.Add(_localctx._recordField);
					State = 424; Match(Comma);
					}
					} 
				}
				State = 430;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER_START || _la==AtSign) {
				{
				State = 431; _localctx._recordField = recordField();
				_localctx._Fields.Add(_localctx._recordField);
				}
			}

			State = 434; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordFieldContext : ParserRuleContext {
		public IdentifierContext Name;
		public ExpressionContext Value;
		public ITerminalNode EqualsSign() { return GetToken(StannumParser.EqualsSign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordField; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordFieldContext recordField() {
		RecordFieldContext _localctx = new RecordFieldContext(Context, State);
		EnterRule(_localctx, 72, RULE_recordField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; _localctx.Name = identifier();
			State = 437; Match(EqualsSign);
			State = 438; _localctx.Value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExprContext : ParserRuleContext {
		public ExpressionContext Value;
		public ITerminalNode RETURN() { return GetToken(StannumParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumParserVisitor<TResult> typedVisitor = visitor as IStannumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExprContext returnExpr() {
		ReturnExprContext _localctx = new ReturnExprContext(Context, State);
		EnterRule(_localctx, 74, RULE_returnExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(RETURN);
			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 441; _localctx.Value = expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return logicalOr__sempred((LogicalOr_Context)_localctx, predIndex);
		case 13: return logicalAnd__sempred((LogicalAnd_Context)_localctx, predIndex);
		case 14: return equality__sempred((Equality_Context)_localctx, predIndex);
		case 15: return relational__sempred((Relational_Context)_localctx, predIndex);
		case 16: return concatenative__sempred((Concatenative_Context)_localctx, predIndex);
		case 17: return additive__sempred((Additive_Context)_localctx, predIndex);
		case 18: return multiplicative__sempred((Multiplicative_Context)_localctx, predIndex);
		case 20: return accessOrCall_sempred((AccessOrCallContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicalOr__sempred(LogicalOr_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAnd__sempred(LogicalAnd_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality__sempred(Equality_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational__sempred(Relational_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool concatenative__sempred(Concatenative_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive__sempred(Additive_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicative__sempred(Multiplicative_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool accessOrCall_sempred(AccessOrCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x37', '\x1BF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x3', '\x2', '\a', '\x2', 'P', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', 'S', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\a', '\x3', 'X', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '[', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', '^', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'h', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		's', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '{', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x81', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x95', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x9A', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xA2', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xA5', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xB0', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xB7', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xBF', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xC2', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xCA', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xCD', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xD5', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xD8', 
		'\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xE0', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xE3', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\xEB', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xEE', '\v', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\a', '\x13', '\xF6', '\n', '\x13', '\f', '\x13', '\xE', 
		'\x13', '\xF9', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x101', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\x104', '\v', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x109', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\a', '\x16', '\x116', '\n', '\x16', '\f', '\x16', '\xE', '\x16', 
		'\x119', '\v', '\x16', '\x3', '\x16', '\x5', '\x16', '\x11C', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x126', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\x129', '\v', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x12C', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\x130', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x133', '\v', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x13F', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x145', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x149', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x14C', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x153', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x157', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x162', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x174', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\a', '!', '\x17A', '\n', '!', '\f', '!', '\xE', '!', '\x17D', '\v', 
		'!', '\x3', '!', '\x5', '!', '\x180', '\n', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', 
		'\"', '\x189', '\n', '\"', '\f', '\"', '\xE', '\"', '\x18C', '\v', '\"', 
		'\x3', '\"', '\x5', '\"', '\x18F', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x5', '#', '\x199', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\a', '$', '\x19F', '\n', '$', '\f', '$', '\xE', '$', '\x1A2', '\v', 
		'$', '\x3', '$', '\x5', '$', '\x1A5', '\n', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x1AD', '\n', 
		'%', '\f', '%', '\xE', '%', '\x1B0', '\v', '%', '\x3', '%', '\x5', '%', 
		'\x1B3', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x1BD', '\n', 
		'\'', '\x3', '\'', '\x2', '\n', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '*', '(', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', '\x2', '\t', '\b', '\x2', 
		'\x12', '\x12', '\x15', '\x15', '\x1F', '\x1F', '\'', '\'', '*', '*', 
		'\x33', '\x33', '\x4', '\x2', '\x18', '\x18', '\x1B', '\x1B', '\x4', '\x2', 
		'\x1C', '\x1D', '$', '%', '\x4', '\x2', '\x1E', '\x1E', ')', ')', '\x5', 
		'\x2', '\x11', '\x11', '&', '&', '\x32', '\x32', '\x4', '\x2', '\x1A', 
		'\x1A', '\x1E', '\x1E', '\x4', '\x2', '(', '(', ',', ',', '\x2', '\x1D5', 
		'\x2', 'Q', '\x3', '\x2', '\x2', '\x2', '\x4', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'g', '\x3', '\x2', '\x2', '\x2', '\b', 'r', '\x3', '\x2', 
		'\x2', '\x2', '\n', 't', '\x3', '\x2', '\x2', '\x2', '\f', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x94', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x12', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x16', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xCE', '\x3', '\x2', '\x2', '\x2', ' ', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xE4', '\x3', '\x2', '\x2', '\x2', '$', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xFA', '\x3', '\x2', '\x2', '\x2', '(', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '*', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', ',', '\x13E', '\x3', '\x2', '\x2', '\x2', '.', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x146', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x34', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x158', '\x3', '\x2', '\x2', '\x2', '\x38', '\x161', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x163', '\x3', '\x2', '\x2', '\x2', '<', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x175', '\x3', '\x2', '\x2', '\x2', '\x42', '\x184', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x198', '\x3', '\x2', '\x2', '\x2', '\x46', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1B6', '\x3', '\x2', '\x2', '\x2', 'L', '\x1BA', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'P', '\x5', '\b', '\x5', '\x2', 'O', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x2', 
		'\x2', '\x3', 'U', '\x3', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x5', 
		'\x6', '\x4', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', 
		'\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\\', '^', '\x5', '\x14', '\v', '\x2', ']', '\\', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', 
		'_', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x2', '\x2', '\x3', 
		'`', '\x5', '\x3', '\x2', '\x2', '\x2', '\x61', 'h', '\x5', '\b', '\x5', 
		'\x2', '\x62', 'h', '\x5', '\n', '\x6', '\x2', '\x63', 'h', '\x5', '\f', 
		'\a', '\x2', '\x64', 'h', '\x5', '\xE', '\b', '\x2', '\x65', 'h', '\x5', 
		'\x10', '\t', '\x2', '\x66', 'h', '\x5', '\x12', '\n', '\x2', 'g', '\x61', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x62', '\x3', '\x2', '\x2', '\x2', 'g', 
		'\x63', '\x3', '\x2', '\x2', '\x2', 'g', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\a', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x5', 
		'\x38', '\x1D', '\x2', 'j', 'k', '\a', '\x17', '\x2', '\x2', 'k', 'l', 
		'\x5', '\x14', '\v', '\x2', 'l', 'm', '\a', '\x31', '\x2', '\x2', 'm', 
		's', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x38', '\x1D', '\x2', 
		'o', 'p', '\a', '\x17', '\x2', '\x2', 'p', 'q', '\x5', '.', '\x18', '\x2', 
		'q', 's', '\x3', '\x2', '\x2', '\x2', 'r', 'i', '\x3', '\x2', '\x2', '\x2', 
		'r', 'n', '\x3', '\x2', '\x2', '\x2', 's', '\t', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\x5', '\x14', '\v', '\x2', 'u', 'v', '\a', '\x31', '\x2', 
		'\x2', 'v', '\v', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x5', '\x38', 
		'\x1D', '\x2', 'x', 'y', '\a', '\x14', '\x2', '\x2', 'y', '{', '\x3', 
		'\x2', '\x2', '\x2', 'z', 'w', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', 
		'\x6', '\x2', '\x2', '}', '\x80', '\x5', '\x14', '\v', '\x2', '~', '\x7F', 
		'\a', ' ', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x38', '\x1D', '\x2', 
		'\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x5', '\x12', '\n', '\x2', '\x83', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\a', '\a', '\x2', '\x2', '\x85', '\x86', '\x5', '\x14', 
		'\v', '\x2', '\x86', '\x87', '\x5', '\x12', '\n', '\x2', '\x87', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\a', '\x2', '\x2', 
		'\x89', '\x8A', '\x5', '\x14', '\v', '\x2', '\x8A', '\x8B', '\x5', '\x12', 
		'\n', '\x2', '\x8B', '\x8C', '\a', '\x5', '\x2', '\x2', '\x8C', '\x8D', 
		'\x5', '\x12', '\n', '\x2', '\x8D', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8F', '\a', '\a', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x14', 
		'\v', '\x2', '\x90', '\x91', '\x5', '\x12', '\n', '\x2', '\x91', '\x92', 
		'\a', '\x5', '\x2', '\x2', '\x92', '\x93', '\x5', '\xE', '\b', '\x2', 
		'\x93', '\x95', '\x3', '\x2', '\x2', '\x2', '\x94', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x88', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x97', '\x5', '\x38', '\x1D', '\x2', '\x97', '\x98', '\a', '\x14', 
		'\x2', '\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x99', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', '\f', 
		'\x2', '\x2', '\x9C', '\x9D', '\x5', '\x14', '\v', '\x2', '\x9D', '\x9E', 
		'\x5', '\x12', '\n', '\x2', '\x9E', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA3', '\a', '!', '\x2', '\x2', '\xA0', '\xA2', '\x5', '\x6', 
		'\x4', '\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\a', '.', '\x2', '\x2', '\xA7', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\x5', '\x16', '\f', '\x2', '\xA9', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xB0', '\x5', '\x18', '\r', '\x2', '\xAB', '\xAC', '\x5', 
		'*', '\x16', '\x2', '\xAC', '\xAD', '\t', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x5', '\x16', '\f', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB7', '\x5', '\x1A', '\xE', '\x2', '\xB2', '\xB3', '\x5', '\x1A', '\xE', 
		'\x2', '\xB3', '\xB4', '\a', '-', '\x2', '\x2', '\xB4', '\xB5', '\x5', 
		'\x18', '\r', '\x2', '\xB5', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\b', 
		'\xE', '\x1', '\x2', '\xB9', '\xBA', '\x5', '\x1C', '\xF', '\x2', '\xBA', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\f', '\x3', '\x2', 
		'\x2', '\xBC', '\xBD', '\a', '\x34', '\x2', '\x2', '\xBD', '\xBF', '\x5', 
		'\x1C', '\xF', '\x2', '\xBE', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\b', '\xF', '\x1', '\x2', '\xC4', '\xC5', '\x5', '\x1E', '\x10', 
		'\x2', '\xC5', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\f', 
		'\x3', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x10', '\x2', '\x2', '\xC8', 
		'\xCA', '\x5', '\x1E', '\x10', '\x2', '\xC9', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\b', '\x10', '\x1', '\x2', '\xCF', '\xD0', '\x5', 
		' ', '\x11', '\x2', '\xD0', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\f', '\x3', '\x2', '\x2', '\xD2', '\xD3', '\t', '\x3', '\x2', 
		'\x2', '\xD3', '\xD5', '\x5', ' ', '\x11', '\x2', '\xD4', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\b', '\x11', '\x1', '\x2', '\xDA', 
		'\xDB', '\x5', '\"', '\x12', '\x2', '\xDB', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\f', '\x3', '\x2', '\x2', '\xDD', '\xDE', '\t', 
		'\x4', '\x2', '\x2', '\xDE', '\xE0', '\x5', '\"', '\x12', '\x2', '\xDF', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '!', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\b', '\x12', '\x1', 
		'\x2', '\xE5', '\xE6', '\x5', '$', '\x13', '\x2', '\xE6', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\f', '\x3', '\x2', '\x2', '\xE8', 
		'\xE9', '\a', '+', '\x2', '\x2', '\xE9', '\xEB', '\x5', '$', '\x13', '\x2', 
		'\xEA', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '#', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\b', '\x13', '\x1', 
		'\x2', '\xF0', '\xF1', '\x5', '&', '\x14', '\x2', '\xF1', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\f', '\x3', '\x2', '\x2', '\xF3', 
		'\xF4', '\t', '\x5', '\x2', '\x2', '\xF4', '\xF6', '\x5', '&', '\x14', 
		'\x2', '\xF5', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\b', 
		'\x14', '\x1', '\x2', '\xFB', '\xFC', '\x5', '(', '\x15', '\x2', '\xFC', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\f', '\x3', '\x2', 
		'\x2', '\xFE', '\xFF', '\t', '\x6', '\x2', '\x2', '\xFF', '\x101', '\x5', 
		'(', '\x15', '\x2', '\x100', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x109', '\x5', '*', '\x16', '\x2', '\x106', '\x107', '\t', '\a', '\x2', 
		'\x2', '\x107', '\x109', '\x5', '(', '\x15', '\x2', '\x108', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x109', ')', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\b', '\x16', 
		'\x1', '\x2', '\x10B', '\x10C', '\x5', ',', '\x17', '\x2', '\x10C', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\f', '\x5', '\x2', '\x2', 
		'\x10E', '\x10F', '\t', '\b', '\x2', '\x2', '\x10F', '\x130', '\x5', '\x38', 
		'\x1D', '\x2', '\x110', '\x111', '\f', '\x4', '\x2', '\x2', '\x111', '\x117', 
		'\a', '#', '\x2', '\x2', '\x112', '\x113', '\x5', '\x14', '\v', '\x2', 
		'\x113', '\x114', '\a', '\x16', '\x2', '\x2', '\x114', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x112', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11C', '\x5', '\x14', '\v', '\x2', '\x11B', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x130', '\a', '\x30', '\x2', 
		'\x2', '\x11E', '\x11F', '\f', '\x3', '\x2', '\x2', '\x11F', '\x120', 
		'\a', '\x14', '\x2', '\x2', '\x120', '\x121', '\x5', '\x38', '\x1D', '\x2', 
		'\x121', '\x127', '\a', '#', '\x2', '\x2', '\x122', '\x123', '\x5', '\x14', 
		'\v', '\x2', '\x123', '\x124', '\a', '\x16', '\x2', '\x2', '\x124', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x129', '\x3', '\x2', '\x2', '\x2', '\x127', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12C', '\x5', '\x14', '\v', '\x2', '\x12B', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', 
		'\x30', '\x2', '\x2', '\x12E', '\x130', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x13F', 
		'\x5', '\x30', '\x19', '\x2', '\x135', '\x13F', '\x5', '\x32', '\x1A', 
		'\x2', '\x136', '\x13F', '\x5', '\x34', '\x1B', '\x2', '\x137', '\x13F', 
		'\x5', '\x36', '\x1C', '\x2', '\x138', '\x13F', '\x5', '\x38', '\x1D', 
		'\x2', '\x139', '\x13F', '\x5', '>', ' ', '\x2', '\x13A', '\x13F', '\x5', 
		'@', '!', '\x2', '\x13B', '\x13F', '\x5', '\x42', '\"', '\x2', '\x13C', 
		'\x13F', '\x5', '\x44', '#', '\x2', '\x13D', '\x13F', '\x5', 'L', '\'', 
		'\x2', '\x13E', '\x134', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x145', '\x5', '\x30', '\x19', '\x2', '\x141', '\x145', '\x5', 
		'>', ' ', '\x2', '\x142', '\x145', '\x5', '@', '!', '\x2', '\x143', '\x145', 
		'\x5', 'H', '%', '\x2', '\x144', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x141', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x146', '\x14A', '\a', '!', '\x2', '\x2', 
		'\x147', '\x149', '\x5', '\x6', '\x4', '\x2', '\x148', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x5', '\x14', '\v', '\x2', 
		'\x14E', '\x14F', '\a', '.', '\x2', '\x2', '\x14F', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x150', '\x152', '\a', '\x3', '\x2', '\x2', '\x151', '\x153', 
		'\x5', '\x38', '\x1D', '\x2', '\x152', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x156', '\a', '\x4', '\x2', '\x2', '\x155', 
		'\x157', '\x5', '\x38', '\x1D', '\x2', '\x156', '\x155', '\x3', '\x2', 
		'\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\a', '#', '\x2', '\x2', 
		'\x159', '\x15A', '\x5', '\x14', '\v', '\x2', '\x15A', '\x15B', '\a', 
		'\x30', '\x2', '\x2', '\x15B', '\x37', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15D', '\x5', ':', '\x1E', '\x2', '\x15D', '\x15E', '\x5', '<', '\x1F', 
		'\x2', '\x15E', '\x162', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', 
		'\a', '\x13', '\x2', '\x2', '\x160', '\x162', '\x5', '<', '\x1F', '\x2', 
		'\x161', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x39', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x164', '\a', '\r', '\x2', '\x2', '\x164', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x166', '\a', '\x37', '\x2', '\x2', '\x166', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x168', '\a', '\a', '\x2', '\x2', '\x168', 
		'\x169', '\x5', '\x14', '\v', '\x2', '\x169', '\x16A', '\x5', '\x30', 
		'\x19', '\x2', '\x16A', '\x16B', '\a', '\x5', '\x2', '\x2', '\x16B', '\x16C', 
		'\x5', '\x30', '\x19', '\x2', '\x16C', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\a', '\a', '\x2', '\x2', '\x16E', '\x16F', '\x5', '\x14', 
		'\v', '\x2', '\x16F', '\x170', '\x5', '\x30', '\x19', '\x2', '\x170', 
		'\x171', '\a', '\x5', '\x2', '\x2', '\x171', '\x172', '\x5', '>', ' ', 
		'\x2', '\x172', '\x174', '\x3', '\x2', '\x2', '\x2', '\x173', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '?', '\x3', '\x2', '\x2', '\x2', '\x175', '\x17B', '\a', '#', 
		'\x2', '\x2', '\x176', '\x177', '\x5', '\x38', '\x1D', '\x2', '\x177', 
		'\x178', '\a', '\x16', '\x2', '\x2', '\x178', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x176', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x180', '\x5', '\x38', '\x1D', '\x2', '\x17F', '\x17E', '\x3', '\x2', 
		'\x2', '\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\a', '\x30', '\x2', '\x2', 
		'\x182', '\x183', '\x5', '\x12', '\n', '\x2', '\x183', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x18A', '\a', '#', '\x2', '\x2', '\x185', 
		'\x186', '\x5', '\x38', '\x1D', '\x2', '\x186', '\x187', '\a', '\x16', 
		'\x2', '\x2', '\x187', '\x189', '\x3', '\x2', '\x2', '\x2', '\x188', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x18A', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18F', '\x5', '\x38', 
		'\x1D', '\x2', '\x18E', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x191', '\a', '\x30', '\x2', '\x2', '\x191', '\x192', 
		'\a', '\x19', '\x2', '\x2', '\x192', '\x193', '\x5', '\x14', '\v', '\x2', 
		'\x193', '\x43', '\x3', '\x2', '\x2', '\x2', '\x194', '\x199', '\a', '\xE', 
		'\x2', '\x2', '\x195', '\x199', '\a', '\xF', '\x2', '\x2', '\x196', '\x199', 
		'\x5', '\x46', '$', '\x2', '\x197', '\x199', '\x5', 'H', '%', '\x2', '\x198', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x198', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x196', '\x3', '\x2', '\x2', '\x2', '\x198', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x19A', '\x1A0', '\a', '\"', '\x2', '\x2', '\x19B', '\x19C', '\x5', '\x14', 
		'\v', '\x2', '\x19C', '\x19D', '\a', '\x16', '\x2', '\x2', '\x19D', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A1', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A5', '\x5', '\x14', '\v', '\x2', '\x1A4', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\a', 
		'/', '\x2', '\x2', '\x1A7', 'G', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1AE', '\a', '!', '\x2', '\x2', '\x1A9', '\x1AA', '\x5', 'J', '&', '\x2', 
		'\x1AA', '\x1AB', '\a', '\x16', '\x2', '\x2', '\x1AB', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', '\x1B3', '\x5', 'J', '&', '\x2', '\x1B2', '\x1B1', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\a', '.', '\x2', '\x2', 
		'\x1B5', 'I', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\x5', '\x38', 
		'\x1D', '\x2', '\x1B7', '\x1B8', '\a', '\x17', '\x2', '\x2', '\x1B8', 
		'\x1B9', '\x5', '\x14', '\v', '\x2', '\x1B9', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1BC', '\a', '\t', '\x2', '\x2', '\x1BB', '\x1BD', '\x5', 
		'\x14', '\v', '\x2', '\x1BC', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BD', 'M', '\x3', '\x2', '\x2', 
		'\x2', '-', 'Q', 'Y', ']', 'g', 'r', 'z', '\x80', '\x94', '\x99', '\xA3', 
		'\xAF', '\xB6', '\xC0', '\xCB', '\xD6', '\xE1', '\xEC', '\xF7', '\x102', 
		'\x108', '\x117', '\x11B', '\x127', '\x12B', '\x12F', '\x131', '\x13E', 
		'\x144', '\x14A', '\x152', '\x156', '\x161', '\x173', '\x17B', '\x17F', 
		'\x18A', '\x18E', '\x198', '\x1A0', '\x1A4', '\x1AE', '\x1B2', '\x1BC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Stannum.Grammar
