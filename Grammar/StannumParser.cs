//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Stannum.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Stannum.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class StannumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, BREAK=36, CONTINUE=37, ELSE=38, 
		FOR=39, IF=40, MATCH=41, RETURN=42, STRUCT=43, VAR=44, WHILE=45, IDENTIFIER=46, 
		NUMBER=47, STRING=48, WS=49;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_definition = 2, RULE_exprStmt = 3, 
		RULE_forStmt = 4, RULE_ifStmt = 5, RULE_whileStmt = 6, RULE_block = 7, 
		RULE_expression = 8, RULE_sequence = 9, RULE_assignment = 10, RULE_coalesce = 11, 
		RULE_logicalOr = 12, RULE_logicalAnd = 13, RULE_equality = 14, RULE_relational = 15, 
		RULE_additive = 16, RULE_multiplicative = 17, RULE_unary_ = 18, RULE_call_ = 19, 
		RULE_primary = 20, RULE_primaryWithBlock = 21, RULE_access_ = 22, RULE_blockExpr = 23, 
		RULE_breakExpr = 24, RULE_continueExpr = 25, RULE_grouped = 26, RULE_identifier = 27, 
		RULE_ifExpr = 28, RULE_lambdaWithBlock = 29, RULE_lambdaWithExpr = 30, 
		RULE_literal = 31, RULE_list = 32, RULE_record = 33, RULE_recordMember = 34, 
		RULE_returnExpr = 35, RULE_keyword = 36;
	public static readonly string[] ruleNames = {
		"program", "statement", "definition", "exprStmt", "forStmt", "ifStmt", 
		"whileStmt", "block", "expression", "sequence", "assignment", "coalesce", 
		"logicalOr", "logicalAnd", "equality", "relational", "additive", "multiplicative", 
		"unary_", "call_", "primary", "primaryWithBlock", "access_", "blockExpr", 
		"breakExpr", "continueExpr", "grouped", "identifier", "ifExpr", "lambdaWithBlock", 
		"lambdaWithExpr", "literal", "list", "record", "recordMember", "returnExpr", 
		"keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "':'", "'->'", "'{'", "'}'", "':='", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'??'", "'||'", "'&&'", "'=='", "'!='", "'<'", 
		"'>'", "'<='", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'('", 
		"','", "')'", "'.'", "'$'", "'=>'", "'['", "']'", "'break'", "'continue'", 
		"'else'", "'for'", "'if'", "'match'", "'return'", "'struct'", "'var'", 
		"'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"BREAK", "CONTINUE", "ELSE", "FOR", "IF", "MATCH", "RETURN", "STRUCT", 
		"VAR", "WHILE", "IDENTIFIER", "NUMBER", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Stannum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StannumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StannumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StannumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		public ITerminalNode Eof() { return GetToken(StannumParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__31) | (1L << FOR) | (1L << IF) | (1L << WHILE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 74; _localctx._statement = statement();
				_localctx._statements.Add(_localctx._statement);
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; exprStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84; forStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 85; ifStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 86; whileStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 87; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public IdentifierContext Name;
		public ExpressionContext Value;
		public PrimaryWithBlockContext ValueWithoutSemi;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryWithBlockContext primaryWithBlock() {
			return GetRuleContext<PrimaryWithBlockContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_definition);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; _localctx.Name = identifier();
				State = 91; Match(T__0);
				State = 92; _localctx.Value = expression();
				State = 93; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; _localctx.Name = identifier();
				State = 96; Match(T__0);
				State = 97; _localctx.ValueWithoutSemi = primaryWithBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		public ExpressionContext Value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_exprStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; _localctx.Value = expression();
			State = 102; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public IdentifierContext Label;
		public ExpressionContext Value;
		public IdentifierContext Variable;
		public BlockContext Body;
		public ITerminalNode FOR() { return GetToken(StannumParser.FOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31 || _la==IDENTIFIER) {
				{
				State = 104; _localctx.Label = identifier();
				State = 105; Match(T__2);
				}
			}

			State = 109; Match(FOR);
			State = 110; _localctx.Value = expression();
			State = 111; Match(T__3);
			State = 112; _localctx.Variable = identifier();
			State = 113; _localctx.Body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ExpressionContext Condition;
		public BlockContext Consequent;
		public BlockContext Alternative;
		public IfStmtContext AlternativeIf;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(IF);
			State = 116; _localctx.Condition = expression();
			State = 117; _localctx.Consequent = block();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 118; Match(ELSE);
				State = 121;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 119; _localctx.Alternative = block();
					}
					break;
				case IF:
					{
					State = 120; _localctx.AlternativeIf = ifStmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public IdentifierContext Label;
		public ExpressionContext Value;
		public BlockContext Body;
		public ITerminalNode WHILE() { return GetToken(StannumParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_whileStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31 || _la==IDENTIFIER) {
				{
				State = 125; _localctx.Label = identifier();
				State = 126; Match(T__2);
				}
			}

			State = 130; Match(WHILE);
			State = 131; _localctx.Value = expression();
			State = 132; _localctx.Body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(T__4);
			State = 135; _localctx._statement = statement();
			_localctx._Statements.Add(_localctx._statement);
			State = 136; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; sequence(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		public SequenceContext Left;
		public AssignmentContext Right;
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		return sequence(0);
	}

	private SequenceContext sequence(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SequenceContext _localctx = new SequenceContext(Context, _parentState);
		SequenceContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_sequence, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 141; _localctx.Right = assignment();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 148;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SequenceContext(_parentctx, _parentState);
					_localctx.Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_sequence);
					State = 143;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 144; Match(T__1);
					State = 145; _localctx.Right = assignment();
					}
					} 
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public Access_Context Left;
		public IToken Op;
		public ExpressionContext Right;
		public Access_Context access_() {
			return GetRuleContext<Access_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; _localctx.Left = access_(0);
			State = 152;
			_localctx.Op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
				_localctx.Op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 153; _localctx.Right = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoalesceContext : ParserRuleContext {
		public LogicalOrContext Left;
		public CoalesceContext Right;
		public LogicalOrContext logicalOr() {
			return GetRuleContext<LogicalOrContext>(0);
		}
		public CoalesceContext coalesce() {
			return GetRuleContext<CoalesceContext>(0);
		}
		public CoalesceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coalesce; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoalesceContext coalesce() {
		CoalesceContext _localctx = new CoalesceContext(Context, State);
		EnterRule(_localctx, 22, RULE_coalesce);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; _localctx.Left = logicalOr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; _localctx.Left = logicalOr(0);
				State = 157; Match(T__12);
				State = 158; _localctx.Right = coalesce();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrContext : ParserRuleContext {
		public LogicalOrContext Left;
		public LogicalAndContext Right;
		public LogicalAndContext logicalAnd() {
			return GetRuleContext<LogicalAndContext>(0);
		}
		public LogicalOrContext logicalOr() {
			return GetRuleContext<LogicalOrContext>(0);
		}
		public LogicalOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrContext logicalOr() {
		return logicalOr(0);
	}

	private LogicalOrContext logicalOr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrContext _localctx = new LogicalOrContext(Context, _parentState);
		LogicalOrContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_logicalOr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 163; _localctx.Right = logicalAnd(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrContext(_parentctx, _parentState);
					_localctx.Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOr);
					State = 165;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 166; Match(T__13);
					State = 167; _localctx.Right = logicalAnd(0);
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndContext : ParserRuleContext {
		public LogicalAndContext Left;
		public EqualityContext Right;
		public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public LogicalAndContext logicalAnd() {
			return GetRuleContext<LogicalAndContext>(0);
		}
		public LogicalAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAnd; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndContext logicalAnd() {
		return logicalAnd(0);
	}

	private LogicalAndContext logicalAnd(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndContext _localctx = new LogicalAndContext(Context, _parentState);
		LogicalAndContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_logicalAnd, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 174; _localctx.Right = equality(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndContext(_parentctx, _parentState);
					_localctx.Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAnd);
					State = 176;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 177; Match(T__14);
					State = 178; _localctx.Right = equality(0);
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		public EqualityContext Left;
		public RelationalContext Right;
		public IToken Op;
		public RelationalContext relational() {
			return GetRuleContext<RelationalContext>(0);
		}
		public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		return equality(0);
	}

	private EqualityContext equality(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityContext _localctx = new EqualityContext(Context, _parentState);
		EqualityContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_equality, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 185; _localctx.Right = relational(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EqualityContext(_parentctx, _parentState);
					_localctx.Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_equality);
					State = 187;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 188;
					_localctx.Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__15 || _la==T__16) ) {
						_localctx.Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 189; _localctx.Right = relational(0);
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalContext : ParserRuleContext {
		public RelationalContext Left;
		public AdditiveContext Right;
		public IToken Op;
		public AdditiveContext additive() {
			return GetRuleContext<AdditiveContext>(0);
		}
		public RelationalContext relational() {
			return GetRuleContext<RelationalContext>(0);
		}
		public RelationalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalContext relational() {
		return relational(0);
	}

	private RelationalContext relational(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalContext _localctx = new RelationalContext(Context, _parentState);
		RelationalContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_relational, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 196; _localctx.Right = additive(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationalContext(_parentctx, _parentState);
					_localctx.Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_relational);
					State = 198;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 199;
					_localctx.Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
						_localctx.Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 200; _localctx.Right = additive(0);
					}
					} 
				}
				State = 205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveContext : ParserRuleContext {
		public AdditiveContext Left;
		public MultiplicativeContext Right;
		public IToken Op;
		public MultiplicativeContext multiplicative() {
			return GetRuleContext<MultiplicativeContext>(0);
		}
		public AdditiveContext additive() {
			return GetRuleContext<AdditiveContext>(0);
		}
		public AdditiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveContext additive() {
		return additive(0);
	}

	private AdditiveContext additive(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveContext _localctx = new AdditiveContext(Context, _parentState);
		AdditiveContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_additive, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 207; _localctx.Right = multiplicative(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 214;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditiveContext(_parentctx, _parentState);
					_localctx.Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additive);
					State = 209;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 210;
					_localctx.Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__21 || _la==T__22) ) {
						_localctx.Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 211; _localctx.Right = multiplicative(0);
					}
					} 
				}
				State = 216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeContext : ParserRuleContext {
		public MultiplicativeContext Left;
		public Unary_Context Right;
		public IToken Op;
		public Unary_Context unary_() {
			return GetRuleContext<Unary_Context>(0);
		}
		public MultiplicativeContext multiplicative() {
			return GetRuleContext<MultiplicativeContext>(0);
		}
		public MultiplicativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeContext multiplicative() {
		return multiplicative(0);
	}

	private MultiplicativeContext multiplicative(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeContext _localctx = new MultiplicativeContext(Context, _parentState);
		MultiplicativeContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_multiplicative, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 218; _localctx.Right = unary_();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicativeContext(_parentctx, _parentState);
					_localctx.Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative);
					State = 220;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 221;
					_localctx.Op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
						_localctx.Op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 222; _localctx.Right = unary_();
					}
					} 
				}
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_Context : ParserRuleContext {
		public Unary_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_; } }
	 
		public Unary_Context() { }
		public virtual void CopyFrom(Unary_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnarySkipContext : Unary_Context {
		public Call_Context call_() {
			return GetRuleContext<Call_Context>(0);
		}
		public UnarySkipContext(Unary_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnarySkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryContext : Unary_Context {
		public IToken Op;
		public Unary_Context Operand;
		public Unary_Context unary_() {
			return GetRuleContext<Unary_Context>(0);
		}
		public UnaryContext(Unary_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_Context unary_() {
		Unary_Context _localctx = new Unary_Context(Context, State);
		EnterRule(_localctx, 36, RULE_unary_);
		int _la;
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__27:
			case T__31:
			case T__33:
			case BREAK:
			case CONTINUE:
			case IF:
			case RETURN:
			case IDENTIFIER:
			case NUMBER:
			case STRING:
				_localctx = new UnarySkipContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; call_(0);
				}
				break;
			case T__22:
			case T__26:
				_localctx = new UnaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				((UnaryContext)_localctx).Op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__22 || _la==T__26) ) {
					((UnaryContext)_localctx).Op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 230; ((UnaryContext)_localctx).Operand = unary_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_Context : ParserRuleContext {
		public Call_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_; } }
	 
		public Call_Context() { }
		public virtual void CopyFrom(Call_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : Call_Context {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Args = new List<ExpressionContext>();
		public Call_Context call_() {
			return GetRuleContext<Call_Context>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CallContext(Call_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallSkipContext : Call_Context {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public CallSkipContext(Call_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_Context call_() {
		return call_(0);
	}

	private Call_Context call_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_Context _localctx = new Call_Context(Context, _parentState);
		Call_Context _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_call_, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CallSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 234; primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CallContext(new Call_Context(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_call_);
					State = 236;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 237; Match(T__27);
					State = 243;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 238; ((CallContext)_localctx)._expression = expression();
							((CallContext)_localctx)._Args.Add(((CallContext)_localctx)._expression);
							State = 239; Match(T__28);
							}
							} 
						}
						State = 245;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__31 || _la==IDENTIFIER) {
						{
						State = 246; ((CallContext)_localctx)._expression = expression();
						((CallContext)_localctx)._Args.Add(((CallContext)_localctx)._expression);
						}
					}

					State = 249; Match(T__29);
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public Access_Context access_() {
			return GetRuleContext<Access_Context>(0);
		}
		public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public BreakExprContext breakExpr() {
			return GetRuleContext<BreakExprContext>(0);
		}
		public ContinueExprContext continueExpr() {
			return GetRuleContext<ContinueExprContext>(0);
		}
		public GroupedContext grouped() {
			return GetRuleContext<GroupedContext>(0);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public LambdaWithBlockContext lambdaWithBlock() {
			return GetRuleContext<LambdaWithBlockContext>(0);
		}
		public LambdaWithExprContext lambdaWithExpr() {
			return GetRuleContext<LambdaWithExprContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ReturnExprContext returnExpr() {
			return GetRuleContext<ReturnExprContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_primary);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; access_(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; blockExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257; breakExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258; continueExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 259; grouped();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 260; ifExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 261; lambdaWithBlock();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 262; lambdaWithExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 263; literal();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 264; returnExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryWithBlockContext : ParserRuleContext {
		public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public LambdaWithBlockContext lambdaWithBlock() {
			return GetRuleContext<LambdaWithBlockContext>(0);
		}
		public PrimaryWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryWithBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryWithBlockContext primaryWithBlock() {
		PrimaryWithBlockContext _localctx = new PrimaryWithBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_primaryWithBlock);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; blockExpr();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268; ifExpr();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 3);
				{
				State = 269; lambdaWithBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_Context : ParserRuleContext {
		public Access_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_; } }
	 
		public Access_Context() { }
		public virtual void CopyFrom(Access_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class AccessContext : Access_Context {
		public Access_Context access_() {
			return GetRuleContext<Access_Context>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AccessContext(Access_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessSkipContext : Access_Context {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AccessSkipContext(Access_Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_Context access_() {
		return access_(0);
	}

	private Access_Context access_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Access_Context _localctx = new Access_Context(Context, _parentState);
		Access_Context _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_access_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AccessSkipContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 273; identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AccessContext(new Access_Context(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_access_);
					State = 275;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 276; Match(T__30);
					State = 277; identifier();
					}
					} 
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockExprContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		public ExpressionContext Value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExprContext blockExpr() {
		BlockExprContext _localctx = new BlockExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_blockExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(T__4);
			State = 287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 284; _localctx._statement = statement();
					_localctx._Statements.Add(_localctx._statement);
					}
					} 
				}
				State = 289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 290; _localctx.Value = expression();
			State = 291; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakExprContext : ParserRuleContext {
		public IdentifierContext Label;
		public ITerminalNode BREAK() { return GetToken(StannumParser.BREAK, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakExprContext breakExpr() {
		BreakExprContext _localctx = new BreakExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_breakExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(BREAK);
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 294; _localctx.Label = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueExprContext : ParserRuleContext {
		public IdentifierContext Label;
		public ITerminalNode CONTINUE() { return GetToken(StannumParser.CONTINUE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueExprContext continueExpr() {
		ContinueExprContext _localctx = new ContinueExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_continueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(CONTINUE);
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 298; _localctx.Label = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedContext : ParserRuleContext {
		public ExpressionContext Value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedContext grouped() {
		GroupedContext _localctx = new GroupedContext(Context, State);
		EnterRule(_localctx, 52, RULE_grouped);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(T__27);
			State = 302; _localctx.Value = expression();
			State = 303; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(StannumParser.IDENTIFIER, 0); }
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_identifier);
		try {
			int _alt;
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305; Match(IDENTIFIER);
				State = 309;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 306; keyword();
						}
						} 
					}
					State = 311;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; Match(T__31);
				State = 314;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 313; keyword();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 316;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExprContext : ParserRuleContext {
		public ExpressionContext Condition;
		public BlockExprContext Consequent;
		public BlockExprContext Alternative;
		public IfExprContext AlternativeIf;
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockExprContext[] blockExpr() {
			return GetRuleContexts<BlockExprContext>();
		}
		public BlockExprContext blockExpr(int i) {
			return GetRuleContext<BlockExprContext>(i);
		}
		public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public IfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExprContext ifExpr() {
		IfExprContext _localctx = new IfExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; Match(IF);
			State = 321; _localctx.Condition = expression();
			State = 322; _localctx.Consequent = blockExpr();
			State = 323; Match(ELSE);
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 324; _localctx.Alternative = blockExpr();
				}
				break;
			case IF:
				{
				State = 325; _localctx.AlternativeIf = ifExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaWithBlockContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Params = new List<IdentifierContext>();
		public BlockContext Body;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public LambdaWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaWithBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaWithBlockContext lambdaWithBlock() {
		LambdaWithBlockContext _localctx = new LambdaWithBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_lambdaWithBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(T__27);
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 329; _localctx._identifier = identifier();
					_localctx._Params.Add(_localctx._identifier);
					State = 330; Match(T__28);
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31 || _la==IDENTIFIER) {
				{
				State = 337; _localctx._identifier = identifier();
				_localctx._Params.Add(_localctx._identifier);
				}
			}

			State = 340; Match(T__29);
			State = 341; _localctx.Body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaWithExprContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Params = new List<IdentifierContext>();
		public ExpressionContext Value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public LambdaWithExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaWithExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaWithExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaWithExprContext lambdaWithExpr() {
		LambdaWithExprContext _localctx = new LambdaWithExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_lambdaWithExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(T__27);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 344; _localctx._identifier = identifier();
					_localctx._Params.Add(_localctx._identifier);
					State = 345; Match(T__28);
					}
					} 
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31 || _la==IDENTIFIER) {
				{
				State = 352; _localctx._identifier = identifier();
				_localctx._Params.Add(_localctx._identifier);
				}
			}

			State = 355; Match(T__29);
			State = 356; Match(T__32);
			State = 357; _localctx.Value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(StannumParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(StannumParser.STRING, 0); }
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_literal);
		try {
			State = 363;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359; Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360; Match(STRING);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 3);
				{
				State = 361; list();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 362; record();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Elements = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 64, RULE_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(T__33);
			State = 369;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 366; _localctx._expression = expression();
					_localctx._Elements.Add(_localctx._expression);
					}
					} 
				}
				State = 371;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31 || _la==IDENTIFIER) {
				{
				State = 372; _localctx._expression = expression();
				_localctx._Elements.Add(_localctx._expression);
				}
			}

			State = 375; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : ParserRuleContext {
		public RecordMemberContext _recordMember;
		public IList<RecordMemberContext> _Members = new List<RecordMemberContext>();
		public RecordMemberContext[] recordMember() {
			return GetRuleContexts<RecordMemberContext>();
		}
		public RecordMemberContext recordMember(int i) {
			return GetRuleContext<RecordMemberContext>(i);
		}
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 66, RULE_record);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(T__4);
			State = 378; _localctx._recordMember = recordMember();
			_localctx._Members.Add(_localctx._recordMember);
			State = 383;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 379; Match(T__28);
					State = 380; _localctx._recordMember = recordMember();
					_localctx._Members.Add(_localctx._recordMember);
					}
					} 
				}
				State = 385;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 386; Match(T__28);
				}
			}

			State = 389; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordMemberContext : ParserRuleContext {
		public IdentifierContext Name;
		public ExpressionContext Value;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordMember; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordMemberContext recordMember() {
		RecordMemberContext _localctx = new RecordMemberContext(Context, State);
		EnterRule(_localctx, 68, RULE_recordMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; _localctx.Name = identifier();
			State = 392; Match(T__0);
			State = 393; _localctx.Value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExprContext : ParserRuleContext {
		public ExpressionContext value;
		public ITerminalNode RETURN() { return GetToken(StannumParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExprContext returnExpr() {
		ReturnExprContext _localctx = new ReturnExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_returnExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(RETURN);
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 396; _localctx.value = expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(StannumParser.IDENTIFIER, 0); }
		public ITerminalNode BREAK() { return GetToken(StannumParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(StannumParser.CONTINUE, 0); }
		public ITerminalNode ELSE() { return GetToken(StannumParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(StannumParser.FOR, 0); }
		public ITerminalNode IF() { return GetToken(StannumParser.IF, 0); }
		public ITerminalNode MATCH() { return GetToken(StannumParser.MATCH, 0); }
		public ITerminalNode RETURN() { return GetToken(StannumParser.RETURN, 0); }
		public ITerminalNode STRUCT() { return GetToken(StannumParser.STRUCT, 0); }
		public ITerminalNode VAR() { return GetToken(StannumParser.VAR, 0); }
		public ITerminalNode WHILE() { return GetToken(StannumParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStannumVisitor<TResult> typedVisitor = visitor as IStannumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 72, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONTINUE) | (1L << ELSE) | (1L << FOR) | (1L << IF) | (1L << MATCH) | (1L << RETURN) | (1L << STRUCT) | (1L << VAR) | (1L << WHILE) | (1L << IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return sequence_sempred((SequenceContext)_localctx, predIndex);
		case 12: return logicalOr_sempred((LogicalOrContext)_localctx, predIndex);
		case 13: return logicalAnd_sempred((LogicalAndContext)_localctx, predIndex);
		case 14: return equality_sempred((EqualityContext)_localctx, predIndex);
		case 15: return relational_sempred((RelationalContext)_localctx, predIndex);
		case 16: return additive_sempred((AdditiveContext)_localctx, predIndex);
		case 17: return multiplicative_sempred((MultiplicativeContext)_localctx, predIndex);
		case 19: return call__sempred((Call_Context)_localctx, predIndex);
		case 22: return access__sempred((Access_Context)_localctx, predIndex);
		}
		return true;
	}
	private bool sequence_sempred(SequenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOr_sempred(LogicalOrContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAnd_sempred(LogicalAndContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_sempred(EqualityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_sempred(RelationalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive_sempred(AdditiveContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicative_sempred(MultiplicativeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool call__sempred(Call_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool access__sempred(Access_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x33', '\x194', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\a', '\x2', 'N', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', 'Q', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '[', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x66', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'n', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '|', '\n', '\a', '\x5', '\a', 
		'~', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x83', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x95', '\n', '\v', '\f', '\v', '\xE', '\v', '\x98', 
		'\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xA3', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xAB', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xAE', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xB6', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB9', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xC1', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xC4', 
		'\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xCC', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xCF', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\xD7', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xDA', '\v', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\a', '\x13', '\xE2', '\n', '\x13', '\f', '\x13', '\xE', 
		'\x13', '\xE5', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xEA', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\a', '\x15', '\xF4', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\xF7', '\v', '\x15', '\x3', '\x15', '\x5', '\x15', '\xFA', '\n', '\x15', 
		'\x3', '\x15', '\a', '\x15', '\xFD', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\x100', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x10C', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x111', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\x119', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\x11C', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x120', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x123', '\v', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x12A', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x12E', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x136', '\n', 
		'\x1D', '\f', '\x1D', '\xE', '\x1D', '\x139', '\v', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x6', '\x1D', '\x13D', '\n', '\x1D', '\r', '\x1D', '\xE', 
		'\x1D', '\x13E', '\x5', '\x1D', '\x141', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x149', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\a', '\x1F', '\x14F', '\n', '\x1F', '\f', '\x1F', 
		'\xE', '\x1F', '\x152', '\v', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x155', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x15E', '\n', ' ', '\f', 
		' ', '\xE', ' ', '\x161', '\v', ' ', '\x3', ' ', '\x5', ' ', '\x164', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x16E', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x172', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x175', '\v', '\"', '\x3', '\"', '\x5', '\"', '\x178', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\a', '#', '\x180', '\n', '#', '\f', '#', '\xE', '#', '\x183', '\v', '#', 
		'\x3', '#', '\x5', '#', '\x186', '\n', '#', '\x3', '#', '\x3', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x190', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x2', '\v', 
		'\x14', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '(', '.', '\'', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', '\x2', '\t', '\x3', '\x2', '\t', '\xE', '\x3', '\x2', 
		'\x12', '\x13', '\x3', '\x2', '\x14', '\x17', '\x3', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x1A', '\x1C', '\x4', '\x2', '\x19', '\x19', '\x1D', '\x1D', 
		'\x3', '\x2', '&', '\x30', '\x2', '\x1A4', '\x2', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'Z', '\x3', '\x2', '\x2', '\x2', '\x6', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'g', '\x3', '\x2', '\x2', '\x2', '\n', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'u', '\x3', '\x2', '\x2', '\x2', '\xE', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x99', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xC5', '\x3', '\x2', '\x2', '\x2', '\"', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xDB', '\x3', '\x2', '\x2', '\x2', '&', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xEB', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', ',', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x112', '\x3', '\x2', '\x2', '\x2', '\x30', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x127', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x36', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x140', '\x3', '\x2', '\x2', '\x2', ':', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x14A', '\x3', '\x2', '\x2', '\x2', '>', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x44', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x189', '\x3', '\x2', '\x2', '\x2', 'H', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\x5', '\x4', '\x3', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x2', '\x2', '\x3', 
		'S', '\x3', '\x3', '\x2', '\x2', '\x2', 'T', '[', '\x5', '\x6', '\x4', 
		'\x2', 'U', '[', '\x5', '\b', '\x5', '\x2', 'V', '[', '\x5', '\n', '\x6', 
		'\x2', 'W', '[', '\x5', '\f', '\a', '\x2', 'X', '[', '\x5', '\xE', '\b', 
		'\x2', 'Y', '[', '\x5', '\x10', '\t', '\x2', 'Z', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'U', '\x3', '\x2', '\x2', '\x2', 'Z', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\x5', '\x38', '\x1D', '\x2', ']', '^', '\a', 
		'\x3', '\x2', '\x2', '^', '_', '\x5', '\x12', '\n', '\x2', '_', '`', '\a', 
		'\x4', '\x2', '\x2', '`', '\x66', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x5', '\x38', '\x1D', '\x2', '\x62', '\x63', '\a', '\x3', '\x2', 
		'\x2', '\x63', '\x64', '\x5', ',', '\x17', '\x2', '\x64', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\\', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x66', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\x5', '\x12', '\n', '\x2', 'h', 'i', '\a', '\x4', '\x2', 
		'\x2', 'i', '\t', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x5', '\x38', 
		'\x1D', '\x2', 'k', 'l', '\a', '\x5', '\x2', '\x2', 'l', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', ')', 
		'\x2', '\x2', 'p', 'q', '\x5', '\x12', '\n', '\x2', 'q', 'r', '\a', '\x6', 
		'\x2', '\x2', 'r', 's', '\x5', '\x38', '\x1D', '\x2', 's', 't', '\x5', 
		'\x10', '\t', '\x2', 't', '\v', '\x3', '\x2', '\x2', '\x2', 'u', 'v', 
		'\a', '*', '\x2', '\x2', 'v', 'w', '\x5', '\x12', '\n', '\x2', 'w', '}', 
		'\x5', '\x10', '\t', '\x2', 'x', '{', '\a', '(', '\x2', '\x2', 'y', '|', 
		'\x5', '\x10', '\t', '\x2', 'z', '|', '\x5', '\f', '\a', '\x2', '{', 'y', 
		'\x3', '\x2', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', 
		'~', '\x3', '\x2', '\x2', '\x2', '}', 'x', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\x5', '\x38', '\x1D', '\x2', '\x80', '\x81', '\a', 
		'\x5', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', 
		'/', '\x2', '\x2', '\x85', '\x86', '\x5', '\x12', '\n', '\x2', '\x86', 
		'\x87', '\x5', '\x10', '\t', '\x2', '\x87', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\a', '\a', '\x2', '\x2', '\x89', '\x8A', '\x5', 
		'\x4', '\x3', '\x2', '\x8A', '\x8B', '\a', '\b', '\x2', '\x2', '\x8B', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x14', '\v', 
		'\x2', '\x8D', '\x13', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\b', 
		'\v', '\x1', '\x2', '\x8F', '\x90', '\x5', '\x16', '\f', '\x2', '\x90', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\f', '\x3', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x4', '\x2', '\x2', '\x93', '\x95', '\x5', 
		'\x16', '\f', '\x2', '\x94', '\x91', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\x5', '.', '\x18', '\x2', '\x9A', '\x9B', '\t', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x5', '\x12', '\n', '\x2', '\x9C', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\xA3', '\x5', '\x1A', '\xE', '\x2', '\x9E', 
		'\x9F', '\x5', '\x1A', '\xE', '\x2', '\x9F', '\xA0', '\a', '\xF', '\x2', 
		'\x2', '\xA0', '\xA1', '\x5', '\x18', '\r', '\x2', '\xA1', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\b', '\xE', '\x1', '\x2', '\xA5', '\xA6', '\x5', 
		'\x1C', '\xF', '\x2', '\xA6', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\f', '\x3', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x10', '\x2', 
		'\x2', '\xA9', '\xAB', '\x5', '\x1C', '\xF', '\x2', '\xAA', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\b', '\xF', '\x1', '\x2', '\xB0', 
		'\xB1', '\x5', '\x1E', '\x10', '\x2', '\xB1', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\f', '\x3', '\x2', '\x2', '\xB3', '\xB4', '\a', 
		'\x11', '\x2', '\x2', '\xB4', '\xB6', '\x5', '\x1E', '\x10', '\x2', '\xB5', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\b', '\x10', '\x1', 
		'\x2', '\xBB', '\xBC', '\x5', ' ', '\x11', '\x2', '\xBC', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\f', '\x3', '\x2', '\x2', '\xBE', 
		'\xBF', '\t', '\x3', '\x2', '\x2', '\xBF', '\xC1', '\x5', ' ', '\x11', 
		'\x2', '\xC0', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\b', 
		'\x11', '\x1', '\x2', '\xC6', '\xC7', '\x5', '\"', '\x12', '\x2', '\xC7', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\f', '\x3', '\x2', 
		'\x2', '\xC9', '\xCA', '\t', '\x4', '\x2', '\x2', '\xCA', '\xCC', '\x5', 
		'\"', '\x12', '\x2', '\xCB', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\b', '\x12', '\x1', '\x2', '\xD1', '\xD2', '\x5', '$', '\x13', 
		'\x2', '\xD2', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\f', 
		'\x3', '\x2', '\x2', '\xD4', '\xD5', '\t', '\x5', '\x2', '\x2', '\xD5', 
		'\xD7', '\x5', '$', '\x13', '\x2', '\xD6', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\b', '\x13', '\x1', '\x2', '\xDC', '\xDD', '\x5', 
		'&', '\x14', '\x2', '\xDD', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\f', '\x3', '\x2', '\x2', '\xDF', '\xE0', '\t', '\x6', '\x2', 
		'\x2', '\xE0', '\xE2', '\x5', '&', '\x14', '\x2', '\xE1', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '%', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xEA', '\x5', '(', '\x15', '\x2', '\xE7', 
		'\xE8', '\t', '\a', '\x2', '\x2', '\xE8', '\xEA', '\x5', '&', '\x14', 
		'\x2', '\xE9', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\'', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\b', '\x15', '\x1', '\x2', '\xEC', '\xED', '\x5', '*', '\x16', 
		'\x2', '\xED', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\f', 
		'\x3', '\x2', '\x2', '\xEF', '\xF5', '\a', '\x1E', '\x2', '\x2', '\xF0', 
		'\xF1', '\x5', '\x12', '\n', '\x2', '\xF1', '\xF2', '\a', '\x1F', '\x2', 
		'\x2', '\xF2', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFA', '\x5', '\x12', '\n', '\x2', '\xF9', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFD', '\a', 
		' ', '\x2', '\x2', '\xFC', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x10C', '\x5', '.', '\x18', '\x2', '\x102', '\x10C', '\x5', '\x30', '\x19', 
		'\x2', '\x103', '\x10C', '\x5', '\x32', '\x1A', '\x2', '\x104', '\x10C', 
		'\x5', '\x34', '\x1B', '\x2', '\x105', '\x10C', '\x5', '\x36', '\x1C', 
		'\x2', '\x106', '\x10C', '\x5', ':', '\x1E', '\x2', '\x107', '\x10C', 
		'\x5', '<', '\x1F', '\x2', '\x108', '\x10C', '\x5', '>', ' ', '\x2', '\x109', 
		'\x10C', '\x5', '@', '!', '\x2', '\x10A', '\x10C', '\x5', 'H', '%', '\x2', 
		'\x10B', '\x101', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x103', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x106', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '+', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x111', '\x5', '\x30', '\x19', '\x2', '\x10E', '\x111', '\x5', ':', '\x1E', 
		'\x2', '\x10F', '\x111', '\x5', '<', '\x1F', '\x2', '\x110', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x112', '\x113', '\b', '\x18', '\x1', '\x2', '\x113', '\x114', 
		'\x5', '\x38', '\x1D', '\x2', '\x114', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\f', '\x3', '\x2', '\x2', '\x116', '\x117', '\a', '!', 
		'\x2', '\x2', '\x117', '\x119', '\x5', '\x38', '\x1D', '\x2', '\x118', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x121', '\a', 
		'\a', '\x2', '\x2', '\x11E', '\x120', '\x5', '\x4', '\x3', '\x2', '\x11F', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x5', 
		'\x12', '\n', '\x2', '\x125', '\x126', '\a', '\b', '\x2', '\x2', '\x126', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x127', '\x129', '\a', '&', '\x2', 
		'\x2', '\x128', '\x12A', '\x5', '\x38', '\x1D', '\x2', '\x129', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x33', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', '\a', '\'', 
		'\x2', '\x2', '\x12C', '\x12E', '\x5', '\x38', '\x1D', '\x2', '\x12D', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x35', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', 
		'\a', '\x1E', '\x2', '\x2', '\x130', '\x131', '\x5', '\x12', '\n', '\x2', 
		'\x131', '\x132', '\a', ' ', '\x2', '\x2', '\x132', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x133', '\x137', '\a', '\x30', '\x2', '\x2', '\x134', '\x136', 
		'\x5', 'J', '&', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x139', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13C', '\a', '\"', '\x2', '\x2', '\x13B', '\x13D', '\x5', 
		'J', '&', '\x2', '\x13C', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x141', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\a', '*', '\x2', '\x2', '\x143', 
		'\x144', '\x5', '\x12', '\n', '\x2', '\x144', '\x145', '\x5', '\x30', 
		'\x19', '\x2', '\x145', '\x148', '\a', '(', '\x2', '\x2', '\x146', '\x149', 
		'\x5', '\x30', '\x19', '\x2', '\x147', '\x149', '\x5', ':', '\x1E', '\x2', 
		'\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x149', ';', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x150', '\a', '\x1E', '\x2', '\x2', '\x14B', '\x14C', '\x5', '\x38', 
		'\x1D', '\x2', '\x14C', '\x14D', '\a', '\x1F', '\x2', '\x2', '\x14D', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x152', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x154', '\x3', '\x2', '\x2', '\x2', '\x152', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x155', '\x5', '\x38', '\x1D', '\x2', '\x154', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x156', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', 
		'\a', ' ', '\x2', '\x2', '\x157', '\x158', '\x5', '\x10', '\t', '\x2', 
		'\x158', '=', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15F', '\a', '\x1E', 
		'\x2', '\x2', '\x15A', '\x15B', '\x5', '\x38', '\x1D', '\x2', '\x15B', 
		'\x15C', '\a', '\x1F', '\x2', '\x2', '\x15C', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x164', '\x5', '\x38', '\x1D', '\x2', '\x163', '\x162', '\x3', '\x2', 
		'\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\a', ' ', '\x2', '\x2', 
		'\x166', '\x167', '\a', '#', '\x2', '\x2', '\x167', '\x168', '\x5', '\x12', 
		'\n', '\x2', '\x168', '?', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16E', 
		'\a', '\x31', '\x2', '\x2', '\x16A', '\x16E', '\a', '\x32', '\x2', '\x2', 
		'\x16B', '\x16E', '\x5', '\x42', '\"', '\x2', '\x16C', '\x16E', '\x5', 
		'\x44', '#', '\x2', '\x16D', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16A', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x173', '\a', '$', '\x2', '\x2', 
		'\x170', '\x172', '\x5', '\x12', '\n', '\x2', '\x171', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x175', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x177', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x178', '\x5', '\x12', '\n', '\x2', 
		'\x177', '\x176', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x17A', '\a', '%', '\x2', '\x2', '\x17A', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x17C', '\a', '\a', '\x2', '\x2', '\x17C', '\x181', '\x5', 
		'\x46', '$', '\x2', '\x17D', '\x17E', '\a', '\x1F', '\x2', '\x2', '\x17E', 
		'\x180', '\x5', '\x46', '$', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x183', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x185', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x186', '\a', '\x1F', '\x2', '\x2', '\x185', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', 
		'\a', '\b', '\x2', '\x2', '\x188', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x189', '\x18A', '\x5', '\x38', '\x1D', '\x2', '\x18A', '\x18B', '\a', 
		'\x3', '\x2', '\x2', '\x18B', '\x18C', '\x5', '\x12', '\n', '\x2', '\x18C', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18F', '\a', ',', '\x2', '\x2', 
		'\x18E', '\x190', '\x5', '\x12', '\n', '\x2', '\x18F', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\t', '\b', '\x2', 
		'\x2', '\x192', 'K', '\x3', '\x2', '\x2', '\x2', ')', 'O', 'Z', '\x65', 
		'm', '{', '}', '\x82', '\x96', '\xA2', '\xAC', '\xB7', '\xC2', '\xCD', 
		'\xD8', '\xE3', '\xE9', '\xF5', '\xF9', '\xFE', '\x10B', '\x110', '\x11A', 
		'\x121', '\x129', '\x12D', '\x137', '\x13E', '\x140', '\x148', '\x150', 
		'\x154', '\x15F', '\x163', '\x16D', '\x173', '\x177', '\x181', '\x185', 
		'\x18F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Stannum.Grammar
